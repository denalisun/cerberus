#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CubeOverlapActor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass CubeOverlapActor.CubeOverlapActor_C
// 0x00D0 (0x0838 - 0x0768)
class ACubeOverlapActor_C final : public ABuildingGameplayActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0768(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       Sphere;                                            // 0x0770(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0778(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         CubeBounceFlash_Offset_C4BEF74F49534998A43F64A7834C948F; // 0x0780(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CubeBounceFlash_Flash_C4BEF74F49534998A43F64A7834C948F; // 0x0784(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            CubeBounceFlash__Direction_C4BEF74F49534998A43F64A7834C948F; // 0x0788(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_789[0x7];                                      // 0x0789(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     CubeBounceFlash;                                   // 0x0790(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CubeRetaliationGlow_LookAround_C44E1C044FDF7590933373B1C37E2619; // 0x0798(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CubeRetaliationGlow_LookAt_C44E1C044FDF7590933373B1C37E2619; // 0x07A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CubeRetaliationGlow_Glow_C44E1C044FDF7590933373B1C37E2619; // 0x07A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            CubeRetaliationGlow__Direction_C44E1C044FDF7590933373B1C37E2619; // 0x07AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7AD[0x3];                                      // 0x07AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     CubeRetaliationGlow;                               // 0x07B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Overlaps;                                          // 0x07B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	struct FVector                                CubeLookDirection;                                 // 0x07C8(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D4[0x4];                                      // 0x07D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ZapTarget;                                         // 0x07D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DirectionToPlayer;                                 // 0x07E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TraceHitLocation;                                  // 0x07EC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TraceHitNormal;                                    // 0x07F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TraceDown;                                         // 0x0804(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_805[0x3];                                      // 0x0805(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        ZapInstigator;                                     // 0x0808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeBetweenRuneWubs;                               // 0x0810(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_814[0x4];                                      // 0x0814(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         ShieldOverlapRadius;                               // 0x0818(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_CubeOverlapActor(int32 EntryPoint);
	void ReceiveDestroyed();
	void ZapVehicle(class AFortAthenaVehicle* Vehicle, const struct FVector& Normal, const struct FVector& Location);
	void CubeRuneWub();
	void ReceiveBeginPlay();
	void TraceDownward();
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void CubeBounceFX(const struct FVector& Location, const struct FVector& Normal, class AActor* Target);
	void CubeRetaliationTelegraph();
	void SpawnGC(class AActor* GCTarget, const struct FVector& Location, const struct FVector& Normal);
	void ZapPlayer(class AFortPlayerPawn* InstigatingPlayer);
	void CubeBounceFlash__UpdateFunc();
	void CubeBounceFlash__FinishedFunc();
	void CubeRetaliationGlow__UpdateFunc();
	void CubeRetaliationGlow__FinishedFunc();
	void UserConstructionScript();
	void GetSocketClosestToTarget(class AActor* TargetPlayer, struct FVector* LookAtDirection, struct FVector* SocketLocation);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CubeOverlapActor_C">();
	}
	static class ACubeOverlapActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACubeOverlapActor_C>();
	}
};
static_assert(alignof(ACubeOverlapActor_C) == 0x000008, "Wrong alignment on ACubeOverlapActor_C");
static_assert(sizeof(ACubeOverlapActor_C) == 0x000838, "Wrong size on ACubeOverlapActor_C");
static_assert(offsetof(ACubeOverlapActor_C, UberGraphFrame) == 0x000768, "Member 'ACubeOverlapActor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ACubeOverlapActor_C, Sphere) == 0x000770, "Member 'ACubeOverlapActor_C::Sphere' has a wrong offset!");
static_assert(offsetof(ACubeOverlapActor_C, DefaultSceneRoot) == 0x000778, "Member 'ACubeOverlapActor_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ACubeOverlapActor_C, CubeBounceFlash_Offset_C4BEF74F49534998A43F64A7834C948F) == 0x000780, "Member 'ACubeOverlapActor_C::CubeBounceFlash_Offset_C4BEF74F49534998A43F64A7834C948F' has a wrong offset!");
static_assert(offsetof(ACubeOverlapActor_C, CubeBounceFlash_Flash_C4BEF74F49534998A43F64A7834C948F) == 0x000784, "Member 'ACubeOverlapActor_C::CubeBounceFlash_Flash_C4BEF74F49534998A43F64A7834C948F' has a wrong offset!");
static_assert(offsetof(ACubeOverlapActor_C, CubeBounceFlash__Direction_C4BEF74F49534998A43F64A7834C948F) == 0x000788, "Member 'ACubeOverlapActor_C::CubeBounceFlash__Direction_C4BEF74F49534998A43F64A7834C948F' has a wrong offset!");
static_assert(offsetof(ACubeOverlapActor_C, CubeBounceFlash) == 0x000790, "Member 'ACubeOverlapActor_C::CubeBounceFlash' has a wrong offset!");
static_assert(offsetof(ACubeOverlapActor_C, CubeRetaliationGlow_LookAround_C44E1C044FDF7590933373B1C37E2619) == 0x000798, "Member 'ACubeOverlapActor_C::CubeRetaliationGlow_LookAround_C44E1C044FDF7590933373B1C37E2619' has a wrong offset!");
static_assert(offsetof(ACubeOverlapActor_C, CubeRetaliationGlow_LookAt_C44E1C044FDF7590933373B1C37E2619) == 0x0007A4, "Member 'ACubeOverlapActor_C::CubeRetaliationGlow_LookAt_C44E1C044FDF7590933373B1C37E2619' has a wrong offset!");
static_assert(offsetof(ACubeOverlapActor_C, CubeRetaliationGlow_Glow_C44E1C044FDF7590933373B1C37E2619) == 0x0007A8, "Member 'ACubeOverlapActor_C::CubeRetaliationGlow_Glow_C44E1C044FDF7590933373B1C37E2619' has a wrong offset!");
static_assert(offsetof(ACubeOverlapActor_C, CubeRetaliationGlow__Direction_C44E1C044FDF7590933373B1C37E2619) == 0x0007AC, "Member 'ACubeOverlapActor_C::CubeRetaliationGlow__Direction_C44E1C044FDF7590933373B1C37E2619' has a wrong offset!");
static_assert(offsetof(ACubeOverlapActor_C, CubeRetaliationGlow) == 0x0007B0, "Member 'ACubeOverlapActor_C::CubeRetaliationGlow' has a wrong offset!");
static_assert(offsetof(ACubeOverlapActor_C, Overlaps) == 0x0007B8, "Member 'ACubeOverlapActor_C::Overlaps' has a wrong offset!");
static_assert(offsetof(ACubeOverlapActor_C, CubeLookDirection) == 0x0007C8, "Member 'ACubeOverlapActor_C::CubeLookDirection' has a wrong offset!");
static_assert(offsetof(ACubeOverlapActor_C, ZapTarget) == 0x0007D8, "Member 'ACubeOverlapActor_C::ZapTarget' has a wrong offset!");
static_assert(offsetof(ACubeOverlapActor_C, DirectionToPlayer) == 0x0007E0, "Member 'ACubeOverlapActor_C::DirectionToPlayer' has a wrong offset!");
static_assert(offsetof(ACubeOverlapActor_C, TraceHitLocation) == 0x0007EC, "Member 'ACubeOverlapActor_C::TraceHitLocation' has a wrong offset!");
static_assert(offsetof(ACubeOverlapActor_C, TraceHitNormal) == 0x0007F8, "Member 'ACubeOverlapActor_C::TraceHitNormal' has a wrong offset!");
static_assert(offsetof(ACubeOverlapActor_C, TraceDown) == 0x000804, "Member 'ACubeOverlapActor_C::TraceDown' has a wrong offset!");
static_assert(offsetof(ACubeOverlapActor_C, ZapInstigator) == 0x000808, "Member 'ACubeOverlapActor_C::ZapInstigator' has a wrong offset!");
static_assert(offsetof(ACubeOverlapActor_C, TimeBetweenRuneWubs) == 0x000810, "Member 'ACubeOverlapActor_C::TimeBetweenRuneWubs' has a wrong offset!");
static_assert(offsetof(ACubeOverlapActor_C, ShieldOverlapRadius) == 0x000818, "Member 'ACubeOverlapActor_C::ShieldOverlapRadius' has a wrong offset!");

}

