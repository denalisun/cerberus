#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_IslandPortal

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BGA_IslandPortal.BGA_IslandPortal_C
// 0x0510 (0x0E48 - 0x0938)
class ABGA_IslandPortal_C final : public AFortAthenaCreativePortal
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0938(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   ThumbnailPlane;                                    // 0x0940(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRender;                                        // 0x0948(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       UI_PortalInfoPlate;                                // 0x0950(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Rift_Idle_Loop_Gold;                             // 0x0958(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  RiftPostProcess;                                   // 0x0960(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       PostProcessRadius;                                 // 0x0968(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_RiftClosingUp;                                   // 0x0970(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Rift_Idle_Loop;                                  // 0x0978(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      OverlapCapsule;                                    // 0x0980(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Capsule;                                           // 0x0988(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Rift;                                           // 0x0990(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio_Looping;                                     // 0x0998(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Open_D988993744202060C85FC18A08065960;  // 0x09A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_D988993744202060C85FC18A08065960; // 0x09A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9A5[0x3];                                      // 0x09A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x09A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VectorScale_Open_7AB95DD3448038155AB954ABBF1B806E; // 0x09B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            VectorScale__Direction_7AB95DD3448038155AB954ABBF1B806E; // 0x09B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9B5[0x3];                                      // 0x09B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     VectorScale;                                       // 0x09B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        DeathEffects;                                      // 0x09C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             EnteredRift;                                       // 0x09C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             RiftDestroyed;                                     // 0x09D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x09D8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        EnterRift;                                         // 0x09E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortAthenaVehicle*                     Vehicle;                                           // 0x09E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           FallingAnimation;                                  // 0x09F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         TeleportHeight;                                    // 0x09F8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Hangtime;                                          // 0x0A18(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         TeleportDelay;                                     // 0x0A38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A3C[0x4];                                      // 0x0A3C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortPlayerPawn*>                PassengerArray;                                    // 0x0A40(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	class UParticleSystem*                        CrackExitRift;                                     // 0x0A50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             PlayerExitSkyCrack;                                // 0x0A58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ActorOriginalLocation;                             // 0x0A60(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxSpawnHeightMultiplier;                          // 0x0A6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortQuestItemDefinition*               QuestItem;                                         // 0x0A70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ObjectiveBackendName;                              // 0x0A78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    ObjStat;                                           // 0x0A80(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class UFortQuestItemDefinition*               RiftPortalLocationsQuest;                          // 0x0A90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    ObjStatLoc_1;                                      // 0x0A98(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    ObjStatLoc_2;                                      // 0x0AA8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    ObjStatLoc_3;                                      // 0x0AB8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    ObjStatLoc_4;                                      // 0x0AC8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    ObjStatLoc_5;                                      // 0x0AD8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    ObjStatLoc_6;                                      // 0x0AE8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    ObjStatLoc_7;                                      // 0x0AF8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    ObjStatLoc_8;                                      // 0x0B08(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    ObjStatLoc_9;                                      // 0x0B18(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    ObjStatLoc_10;                                     // 0x0B28(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    ObjStatLoc_11;                                     // 0x0B38(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    ObjStatLoc_12;                                     // 0x0B48(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    ObjStatLoc_13;                                     // 0x0B58(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    ObjStatLoc_14;                                     // 0x0B68(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    ObjStatLoc_15;                                     // 0x0B78(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    ObjStatLoc_16;                                     // 0x0B88(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    ObjStatLoc_17;                                     // 0x0B98(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    ObjStatLoc_18;                                     // 0x0BA8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    ObjStatLoc_19;                                     // 0x0BB8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    ObjStatLoc_20;                                     // 0x0BC8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    ObjStatLoc_21;                                     // 0x0BD8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    ObjStatLoc_22;                                     // 0x0BE8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    ObjStatLoc_23;                                     // 0x0BF8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    ObjStatLoc_24;                                     // 0x0C08(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          CreativeMode;                                      // 0x0C18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C19[0x7];                                      // 0x0C19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OverlapActor;                                      // 0x0C20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RiftLocationNum;                                   // 0x0C28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ActorRotation;                                     // 0x0C2C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FScalableFloat                         ShouldSpawnRift_;                                  // 0x0C38(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AActor*                                 DestinationActor_Deprecated;                       // 0x0C58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         TeleportExitDistance_0;                            // 0x0C60(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         PortalCount;                                       // 0x0C80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C84[0x4];                                      // 0x0C84(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         XPortalSeparation;                                 // 0x0C88(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         StarterIslandTeleportHeight;                       // 0x0CA8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bCanPlayerInteract;                                // 0x0CC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CC9[0x7];                                      // 0x0CC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         YPortalSeparation;                                 // 0x0CD0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AFortPlayerControllerAthena*            PendingTeleport;                                   // 0x0CF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMyPortal;                                        // 0x0CF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CF9[0x7];                                      // 0x0CF9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        Enter_Rift_Gold;                                   // 0x0D00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PortalLightPillar_C*                Beacon;                                            // 0x0D08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           UIDistanceCheckTimer;                              // 0x0D10(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         UIShowDistance;                                    // 0x0D18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1C[0x4];                                      // 0x0D1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   UI_PortalInfoPlateSoftClass;                       // 0x0D20(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   UpdatePlayerName;                                  // 0x0D48(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   UpdatePlayerPop;                                   // 0x0D58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   UpdateIslandName;                                  // 0x0D68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   UpdatePortalUIVis;                                 // 0x0D78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TSoftClassPtr<class UClass>                   UI_IslandSelectSoftClass;                          // 0x0D88(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UClass*                                 UI_IslandSelectClass;                              // 0x0DB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartSkydiving;                                    // 0x0DB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DB9[0x7];                                      // 0x0DB9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   UpdateIsCuratedPortal;                             // 0x0DC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TSoftClassPtr<class UClass>                   UI_IslandCodeEntrySoftClass;                       // 0x0DD0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UClass*                                 UI_IslandCodeEntryClass;                           // 0x0DF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   UpdateDescription;                                 // 0x0E00(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   UpdateLinkCode;                                    // 0x0E10(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bIsBeingDisplayed;                                 // 0x0E20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E21[0x3];                                      // 0x0E21(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThumbnailWorldSizeScale;                           // 0x0E24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           OwnedThumbnailColor;                               // 0x0E28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           UnownedThumbnailColor;                             // 0x0E38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UpdatePlayerName__DelegateSignature(const class FText& NewPlayerName);
	void UpdatePlayerPop__DelegateSignature(int32 NewPop);
	void UpdateIslandName__DelegateSignature(const class FText& NewIslandName);
	void UpdatePortalUIVis__DelegateSignature(bool Show, bool WasHidden, float Distance);
	void UpdateIsCuratedPortal__DelegateSignature(bool bIsCurated, bool bIsLinkCode, bool bIsUserInitiatedLoad);
	void UpdateDescription__DelegateSignature(const class FText& Description);
	void UpdateLinkCode__DelegateSignature(const class FString& LinkCode);
	void ExecuteUbergraph_BGA_IslandPortal(int32 EntryPoint);
	void OnThumbnailTextureReady();
	void Play_Rift_Exit_Sound(const struct FVector& Location);
	void ClientSaveDisplayChanged(bool bSaving);
	void CuratedPortalChanged();
	void UpdatePortal();
	void PortalOpenChanged();
	void TeleportToCreativeHub();
	void DisplayNameChanged();
	void PopulationChanged();
	void CheckShouldDisplayUI();
	void OwningPlayerChanged();
	void CheckIsMyPortal(bool IsMyPortal_0);
	void EvaluateOverlap();
	void ClientTeleportToLobbyIsland(class AFortPlayerController* RequestingController);
	void NotifyTeleportedPlayerPawn(class AFortPlayerPawn* PlayerPawn_0);
	void LoadIslandUI(class AFortPlayerPawn* InteractingPawn);
	void NotifyTeleportedVehicle(class AFortAthenaVehicle* Vehicle_0);
	void OverlappingOnBeginPlay(class AActor* Actor);
	void PlayCosmeticFX(const struct FVector& DestinationLocation);
	void PlayTeleportFX(const struct FVector& PlayerLocation, const struct FVector& DestinationLocation);
	void ReceiveBeginPlay();
	void BndEvt__Capsule_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__Capsule_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__OverlapCapsule_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnLoaded_F2A7F21346C6B461BE9A1182BB5B5DD5(class UClass* Loaded);
	void OnLoaded_A43955A14A20383F466DF18A87BBA501(class UClass* Loaded);
	void OnLoaded_25EC650C4A5067360B49BC87DAFA1B71(class UClass* Loaded);
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void VectorScale__UpdateFunc();
	void VectorScale__FinishedFunc();
	void UserConstructionScript();
	void PlayExpandOrCollapseAudio(bool Expand);
	void OnRep_TeleportLocation();
	void OnRep_Vehicle();
	void OnRep_PlayerPawn();
	void CheckForRiftLocUpdate(class AController* InController);
	void UseRiftQuestUpdate(class AController* InController);
	void GetPortalPosition(struct FVector* Location);
	bool BlueprintOnLocalInteract(class AFortPlayerPawn* InteractingPawn);
	void TeleportToLobbyIsland(class AFortPlayerController* RequestingController);
	void SetPortalUIVisibility(bool Show, float Distance);
	void UpdatePopulationDisplay();
	void UpdateNameDisplay();
	struct FVector ScaleThumbnailPlaneByTextureSize();

	bool BlueprintCanInteract(const class AFortPawn* InteractingPawn) const;
	class FText BlueprintGetInteractionString(const class AFortPawn* InteractingPawn) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BGA_IslandPortal_C">();
	}
	static class ABGA_IslandPortal_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABGA_IslandPortal_C>();
	}
};
static_assert(alignof(ABGA_IslandPortal_C) == 0x000008, "Wrong alignment on ABGA_IslandPortal_C");
static_assert(sizeof(ABGA_IslandPortal_C) == 0x000E48, "Wrong size on ABGA_IslandPortal_C");
static_assert(offsetof(ABGA_IslandPortal_C, UberGraphFrame) == 0x000938, "Member 'ABGA_IslandPortal_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ThumbnailPlane) == 0x000940, "Member 'ABGA_IslandPortal_C::ThumbnailPlane' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, TextRender) == 0x000948, "Member 'ABGA_IslandPortal_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UI_PortalInfoPlate) == 0x000950, "Member 'ABGA_IslandPortal_C::UI_PortalInfoPlate' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, P_Rift_Idle_Loop_Gold) == 0x000958, "Member 'ABGA_IslandPortal_C::P_Rift_Idle_Loop_Gold' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, RiftPostProcess) == 0x000960, "Member 'ABGA_IslandPortal_C::RiftPostProcess' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, PostProcessRadius) == 0x000968, "Member 'ABGA_IslandPortal_C::PostProcessRadius' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, P_RiftClosingUp) == 0x000970, "Member 'ABGA_IslandPortal_C::P_RiftClosingUp' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, P_Rift_Idle_Loop) == 0x000978, "Member 'ABGA_IslandPortal_C::P_Rift_Idle_Loop' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, OverlapCapsule) == 0x000980, "Member 'ABGA_IslandPortal_C::OverlapCapsule' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, Capsule) == 0x000988, "Member 'ABGA_IslandPortal_C::Capsule' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, SM_Rift) == 0x000990, "Member 'ABGA_IslandPortal_C::SM_Rift' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, Audio_Looping) == 0x000998, "Member 'ABGA_IslandPortal_C::Audio_Looping' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, Timeline_0_Open_D988993744202060C85FC18A08065960) == 0x0009A0, "Member 'ABGA_IslandPortal_C::Timeline_0_Open_D988993744202060C85FC18A08065960' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, Timeline_0__Direction_D988993744202060C85FC18A08065960) == 0x0009A4, "Member 'ABGA_IslandPortal_C::Timeline_0__Direction_D988993744202060C85FC18A08065960' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, Timeline_0) == 0x0009A8, "Member 'ABGA_IslandPortal_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, VectorScale_Open_7AB95DD3448038155AB954ABBF1B806E) == 0x0009B0, "Member 'ABGA_IslandPortal_C::VectorScale_Open_7AB95DD3448038155AB954ABBF1B806E' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, VectorScale__Direction_7AB95DD3448038155AB954ABBF1B806E) == 0x0009B4, "Member 'ABGA_IslandPortal_C::VectorScale__Direction_7AB95DD3448038155AB954ABBF1B806E' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, VectorScale) == 0x0009B8, "Member 'ABGA_IslandPortal_C::VectorScale' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, DeathEffects) == 0x0009C0, "Member 'ABGA_IslandPortal_C::DeathEffects' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, EnteredRift) == 0x0009C8, "Member 'ABGA_IslandPortal_C::EnteredRift' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, RiftDestroyed) == 0x0009D0, "Member 'ABGA_IslandPortal_C::RiftDestroyed' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, PlayerPawn) == 0x0009D8, "Member 'ABGA_IslandPortal_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, EnterRift) == 0x0009E0, "Member 'ABGA_IslandPortal_C::EnterRift' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, Vehicle) == 0x0009E8, "Member 'ABGA_IslandPortal_C::Vehicle' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, FallingAnimation) == 0x0009F0, "Member 'ABGA_IslandPortal_C::FallingAnimation' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, TeleportHeight) == 0x0009F8, "Member 'ABGA_IslandPortal_C::TeleportHeight' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, Hangtime) == 0x000A18, "Member 'ABGA_IslandPortal_C::Hangtime' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, TeleportDelay) == 0x000A38, "Member 'ABGA_IslandPortal_C::TeleportDelay' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, PassengerArray) == 0x000A40, "Member 'ABGA_IslandPortal_C::PassengerArray' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, CrackExitRift) == 0x000A50, "Member 'ABGA_IslandPortal_C::CrackExitRift' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, PlayerExitSkyCrack) == 0x000A58, "Member 'ABGA_IslandPortal_C::PlayerExitSkyCrack' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ActorOriginalLocation) == 0x000A60, "Member 'ABGA_IslandPortal_C::ActorOriginalLocation' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, MaxSpawnHeightMultiplier) == 0x000A6C, "Member 'ABGA_IslandPortal_C::MaxSpawnHeightMultiplier' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, QuestItem) == 0x000A70, "Member 'ABGA_IslandPortal_C::QuestItem' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ObjectiveBackendName) == 0x000A78, "Member 'ABGA_IslandPortal_C::ObjectiveBackendName' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ObjStat) == 0x000A80, "Member 'ABGA_IslandPortal_C::ObjStat' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, RiftPortalLocationsQuest) == 0x000A90, "Member 'ABGA_IslandPortal_C::RiftPortalLocationsQuest' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ObjStatLoc_1) == 0x000A98, "Member 'ABGA_IslandPortal_C::ObjStatLoc_1' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ObjStatLoc_2) == 0x000AA8, "Member 'ABGA_IslandPortal_C::ObjStatLoc_2' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ObjStatLoc_3) == 0x000AB8, "Member 'ABGA_IslandPortal_C::ObjStatLoc_3' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ObjStatLoc_4) == 0x000AC8, "Member 'ABGA_IslandPortal_C::ObjStatLoc_4' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ObjStatLoc_5) == 0x000AD8, "Member 'ABGA_IslandPortal_C::ObjStatLoc_5' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ObjStatLoc_6) == 0x000AE8, "Member 'ABGA_IslandPortal_C::ObjStatLoc_6' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ObjStatLoc_7) == 0x000AF8, "Member 'ABGA_IslandPortal_C::ObjStatLoc_7' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ObjStatLoc_8) == 0x000B08, "Member 'ABGA_IslandPortal_C::ObjStatLoc_8' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ObjStatLoc_9) == 0x000B18, "Member 'ABGA_IslandPortal_C::ObjStatLoc_9' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ObjStatLoc_10) == 0x000B28, "Member 'ABGA_IslandPortal_C::ObjStatLoc_10' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ObjStatLoc_11) == 0x000B38, "Member 'ABGA_IslandPortal_C::ObjStatLoc_11' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ObjStatLoc_12) == 0x000B48, "Member 'ABGA_IslandPortal_C::ObjStatLoc_12' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ObjStatLoc_13) == 0x000B58, "Member 'ABGA_IslandPortal_C::ObjStatLoc_13' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ObjStatLoc_14) == 0x000B68, "Member 'ABGA_IslandPortal_C::ObjStatLoc_14' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ObjStatLoc_15) == 0x000B78, "Member 'ABGA_IslandPortal_C::ObjStatLoc_15' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ObjStatLoc_16) == 0x000B88, "Member 'ABGA_IslandPortal_C::ObjStatLoc_16' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ObjStatLoc_17) == 0x000B98, "Member 'ABGA_IslandPortal_C::ObjStatLoc_17' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ObjStatLoc_18) == 0x000BA8, "Member 'ABGA_IslandPortal_C::ObjStatLoc_18' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ObjStatLoc_19) == 0x000BB8, "Member 'ABGA_IslandPortal_C::ObjStatLoc_19' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ObjStatLoc_20) == 0x000BC8, "Member 'ABGA_IslandPortal_C::ObjStatLoc_20' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ObjStatLoc_21) == 0x000BD8, "Member 'ABGA_IslandPortal_C::ObjStatLoc_21' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ObjStatLoc_22) == 0x000BE8, "Member 'ABGA_IslandPortal_C::ObjStatLoc_22' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ObjStatLoc_23) == 0x000BF8, "Member 'ABGA_IslandPortal_C::ObjStatLoc_23' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ObjStatLoc_24) == 0x000C08, "Member 'ABGA_IslandPortal_C::ObjStatLoc_24' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, CreativeMode) == 0x000C18, "Member 'ABGA_IslandPortal_C::CreativeMode' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, OverlapActor) == 0x000C20, "Member 'ABGA_IslandPortal_C::OverlapActor' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, RiftLocationNum) == 0x000C28, "Member 'ABGA_IslandPortal_C::RiftLocationNum' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ActorRotation) == 0x000C2C, "Member 'ABGA_IslandPortal_C::ActorRotation' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ShouldSpawnRift_) == 0x000C38, "Member 'ABGA_IslandPortal_C::ShouldSpawnRift_' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, DestinationActor_Deprecated) == 0x000C58, "Member 'ABGA_IslandPortal_C::DestinationActor_Deprecated' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, TeleportExitDistance_0) == 0x000C60, "Member 'ABGA_IslandPortal_C::TeleportExitDistance_0' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, PortalCount) == 0x000C80, "Member 'ABGA_IslandPortal_C::PortalCount' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, XPortalSeparation) == 0x000C88, "Member 'ABGA_IslandPortal_C::XPortalSeparation' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, StarterIslandTeleportHeight) == 0x000CA8, "Member 'ABGA_IslandPortal_C::StarterIslandTeleportHeight' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, bCanPlayerInteract) == 0x000CC8, "Member 'ABGA_IslandPortal_C::bCanPlayerInteract' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, YPortalSeparation) == 0x000CD0, "Member 'ABGA_IslandPortal_C::YPortalSeparation' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, PendingTeleport) == 0x000CF0, "Member 'ABGA_IslandPortal_C::PendingTeleport' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, IsMyPortal) == 0x000CF8, "Member 'ABGA_IslandPortal_C::IsMyPortal' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, Enter_Rift_Gold) == 0x000D00, "Member 'ABGA_IslandPortal_C::Enter_Rift_Gold' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, Beacon) == 0x000D08, "Member 'ABGA_IslandPortal_C::Beacon' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UIDistanceCheckTimer) == 0x000D10, "Member 'ABGA_IslandPortal_C::UIDistanceCheckTimer' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UIShowDistance) == 0x000D18, "Member 'ABGA_IslandPortal_C::UIShowDistance' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UI_PortalInfoPlateSoftClass) == 0x000D20, "Member 'ABGA_IslandPortal_C::UI_PortalInfoPlateSoftClass' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UpdatePlayerName) == 0x000D48, "Member 'ABGA_IslandPortal_C::UpdatePlayerName' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UpdatePlayerPop) == 0x000D58, "Member 'ABGA_IslandPortal_C::UpdatePlayerPop' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UpdateIslandName) == 0x000D68, "Member 'ABGA_IslandPortal_C::UpdateIslandName' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UpdatePortalUIVis) == 0x000D78, "Member 'ABGA_IslandPortal_C::UpdatePortalUIVis' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UI_IslandSelectSoftClass) == 0x000D88, "Member 'ABGA_IslandPortal_C::UI_IslandSelectSoftClass' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UI_IslandSelectClass) == 0x000DB0, "Member 'ABGA_IslandPortal_C::UI_IslandSelectClass' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, StartSkydiving) == 0x000DB8, "Member 'ABGA_IslandPortal_C::StartSkydiving' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UpdateIsCuratedPortal) == 0x000DC0, "Member 'ABGA_IslandPortal_C::UpdateIsCuratedPortal' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UI_IslandCodeEntrySoftClass) == 0x000DD0, "Member 'ABGA_IslandPortal_C::UI_IslandCodeEntrySoftClass' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UI_IslandCodeEntryClass) == 0x000DF8, "Member 'ABGA_IslandPortal_C::UI_IslandCodeEntryClass' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UpdateDescription) == 0x000E00, "Member 'ABGA_IslandPortal_C::UpdateDescription' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UpdateLinkCode) == 0x000E10, "Member 'ABGA_IslandPortal_C::UpdateLinkCode' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, bIsBeingDisplayed) == 0x000E20, "Member 'ABGA_IslandPortal_C::bIsBeingDisplayed' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ThumbnailWorldSizeScale) == 0x000E24, "Member 'ABGA_IslandPortal_C::ThumbnailWorldSizeScale' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, OwnedThumbnailColor) == 0x000E28, "Member 'ABGA_IslandPortal_C::OwnedThumbnailColor' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UnownedThumbnailColor) == 0x000E38, "Member 'ABGA_IslandPortal_C::UnownedThumbnailColor' has a wrong offset!");

}

