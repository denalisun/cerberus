#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GolfCartVehicleSK

#include "Basic.hpp"

#include "GolfCartVehicleSK_classes.hpp"
#include "GolfCartVehicleSK_parameters.hpp"


namespace SDK
{

// Function GolfCartVehicleSK.GolfCartVehicleSK_C.ExecuteUbergraph_GolfCartVehicleSK
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGolfCartVehicleSK_C::ExecuteUbergraph_GolfCartVehicleSK(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "ExecuteUbergraph_GolfCartVehicleSK");

	Params::GolfCartVehicleSK_C_ExecuteUbergraph_GolfCartVehicleSK Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.SetHeadlightState
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EFortDayPhase                           CurrentDayPhase                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EFortDayPhase                           PreviousDayPhase                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bAtCreation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AGolfCartVehicleSK_C::SetHeadlightState(EFortDayPhase CurrentDayPhase, EFortDayPhase PreviousDayPhase, bool bAtCreation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "SetHeadlightState");

	Params::GolfCartVehicleSK_C_SetHeadlightState Parms{};

	Parms.CurrentDayPhase = CurrentDayPhase;
	Parms.PreviousDayPhase = PreviousDayPhase;
	Parms.bAtCreation = bAtCreation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.CanHitLastDriver
// (BlueprintCallable, BlueprintEvent)

void AGolfCartVehicleSK_C::CanHitLastDriver()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "CanHitLastDriver");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.StopDriverCameraShake
// (BlueprintCallable, BlueprintEvent)

void AGolfCartVehicleSK_C::StopDriverCameraShake()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "StopDriverCameraShake");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.StartDriverCameraShake
// (BlueprintCallable, BlueprintEvent)

void AGolfCartVehicleSK_C::StartDriverCameraShake()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "StartDriverCameraShake");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.StartDriverRumble
// (BlueprintCallable, BlueprintEvent)

void AGolfCartVehicleSK_C::StartDriverRumble()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "StartDriverRumble");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.StopDriverRumble
// (BlueprintCallable, BlueprintEvent)

void AGolfCartVehicleSK_C::StopDriverRumble()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "StopDriverRumble");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.OnIsSprintingChanged
// (Event, Protected, BlueprintEvent)

void AGolfCartVehicleSK_C::OnIsSprintingChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "OnIsSprintingChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.OnStopTick
// (Event, Public, BlueprintEvent)

void AGolfCartVehicleSK_C::OnStopTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "OnStopTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.ChangeOutMaterials
// (BlueprintCallable, BlueprintEvent)

void AGolfCartVehicleSK_C::ChangeOutMaterials()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "ChangeOutMaterials");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.K2_ApplyCosmeticWrap
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UAthenaItemWrapDefinition*        LoadedWrap                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGolfCartVehicleSK_C::K2_ApplyCosmeticWrap(const class UAthenaItemWrapDefinition* LoadedWrap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "K2_ApplyCosmeticWrap");

	Params::GolfCartVehicleSK_C_K2_ApplyCosmeticWrap Parms{};

	Parms.LoadedWrap = LoadedWrap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.PawnHitByVehicle
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class AFortPawn*                        Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ImpactPoint                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ImpactNormal                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          LaunchVector                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGolfCartVehicleSK_C::PawnHitByVehicle(class AFortPawn* Pawn, const struct FVector& ImpactPoint, const struct FVector& ImpactNormal, const struct FVector& LaunchVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "PawnHitByVehicle");

	Params::GolfCartVehicleSK_C_PawnHitByVehicle Parms{};

	Parms.Pawn = Pawn;
	Parms.ImpactPoint = std::move(ImpactPoint);
	Parms.ImpactNormal = std::move(ImpactNormal);
	Parms.LaunchVector = std::move(LaunchVector);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.DisableSkelmeshTickAfterBounce
// (BlueprintCallable, BlueprintEvent)

void AGolfCartVehicleSK_C::DisableSkelmeshTickAfterBounce()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "DisableSkelmeshTickAfterBounce");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.RemoteClientBounceEffects
// (BlueprintCallable, BlueprintEvent)

void AGolfCartVehicleSK_C::RemoteClientBounceEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "RemoteClientBounceEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.CheckWater
// (BlueprintCallable, BlueprintEvent)

void AGolfCartVehicleSK_C::CheckWater()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "CheckWater");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.OnExitedWaterVolume
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FVector                          WaterSurfacePoint                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGolfCartVehicleSK_C::OnExitedWaterVolume(const struct FVector& WaterSurfacePoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "OnExitedWaterVolume");

	Params::GolfCartVehicleSK_C_OnExitedWaterVolume Parms{};

	Parms.WaterSurfacePoint = std::move(WaterSurfacePoint);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.OnEnteredWaterVolume
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FVector                          WaterSurfacePoint                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGolfCartVehicleSK_C::OnEnteredWaterVolume(const struct FVector& WaterSurfacePoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "OnEnteredWaterVolume");

	Params::GolfCartVehicleSK_C_OnEnteredWaterVolume Parms{};

	Parms.WaterSurfacePoint = std::move(WaterSurfacePoint);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.BoostIncrease
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   AccumulationStepIndex                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGolfCartVehicleSK_C::BoostIncrease(int32 AccumulationStepIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "BoostIncrease");

	Params::GolfCartVehicleSK_C_BoostIncrease Parms{};

	Parms.AccumulationStepIndex = AccumulationStepIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.Handle Spring Compression Audio
// (BlueprintCallable, BlueprintEvent)

void AGolfCartVehicleSK_C::Handle_Spring_Compression_Audio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "Handle Spring Compression Audio");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AGolfCartVehicleSK_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.StartBoostRumble
// (BlueprintCallable, BlueprintEvent)

void AGolfCartVehicleSK_C::StartBoostRumble()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "StartBoostRumble");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.ReverseBoostTimeline
// (BlueprintCallable, BlueprintEvent)

void AGolfCartVehicleSK_C::ReverseBoostTimeline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "ReverseBoostTimeline");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.DestroyCooldown
// (BlueprintCallable, BlueprintEvent)

void AGolfCartVehicleSK_C::DestroyCooldown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "DestroyCooldown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.BndEvt__SkeletalMesh_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AGolfCartVehicleSK_C::BndEvt__SkeletalMesh_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "BndEvt__SkeletalMesh_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature");

	Params::GolfCartVehicleSK_C_BndEvt__SkeletalMesh_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.LocalPassengerADS
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsADS                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AGolfCartVehicleSK_C::LocalPassengerADS(bool IsADS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "LocalPassengerADS");

	Params::GolfCartVehicleSK_C_LocalPassengerADS Parms{};

	Parms.IsADS = IsADS;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.BoostCameraReverse
// (BlueprintCallable, BlueprintEvent)

void AGolfCartVehicleSK_C::BoostCameraReverse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "BoostCameraReverse");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.BoostRumbleEnd
// (BlueprintCallable, BlueprintEvent)

void AGolfCartVehicleSK_C::BoostRumbleEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "BoostRumbleEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.UpdateBoostRumble
// (BlueprintCallable, BlueprintEvent)

void AGolfCartVehicleSK_C::UpdateBoostRumble()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "UpdateBoostRumble");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.NoShake
// (BlueprintCallable, BlueprintEvent)

void AGolfCartVehicleSK_C::NoShake()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "NoShake");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.PowerSlideEnd
// (Event, Public, BlueprintEvent)

void AGolfCartVehicleSK_C::PowerSlideEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "PowerSlideEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.PowerSlideBegin
// (Event, Public, BlueprintEvent)

void AGolfCartVehicleSK_C::PowerSlideBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "PowerSlideBegin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.EBrakeEnd
// (Event, Public, BlueprintEvent)

void AGolfCartVehicleSK_C::EBrakeEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "EBrakeEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.EBrakeBegin
// (Event, Public, BlueprintEvent)

void AGolfCartVehicleSK_C::EBrakeBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "EBrakeBegin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.BoostEnd
// (Event, Public, BlueprintEvent)

void AGolfCartVehicleSK_C::BoostEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "BoostEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.BoostBegin
// (Event, Public, BlueprintEvent)

void AGolfCartVehicleSK_C::BoostBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "BoostBegin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.OnSpringCompression
// (Event, Protected, BlueprintEvent)

void AGolfCartVehicleSK_C::OnSpringCompression()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "OnSpringCompression");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGolfCartVehicleSK_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "ReceiveEndPlay");

	Params::GolfCartVehicleSK_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.Update Damage State
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGolfCartVehicleSK_C::Update_Damage_State(float Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "Update Damage State");

	Params::GolfCartVehicleSK_C_Update_Damage_State Parms{};

	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.OnDamaged
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTagContainer            DamageTags                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FGameplayEffectContextHandle     EffectContext                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class AController*                      EventInstigator                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGolfCartVehicleSK_C::OnDamaged(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FGameplayEffectContextHandle& EffectContext, class AController* EventInstigator, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "OnDamaged");

	Params::GolfCartVehicleSK_C_OnDamaged Parms{};

	Parms.Damage = Damage;
	Parms.DamageTags = std::move(DamageTags);
	Parms.EffectContext = std::move(EffectContext);
	Parms.EventInstigator = EventInstigator;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.OnPawnExitVehicle
// (Event, Public, BlueprintEvent)
// Parameters:
// class AFortPlayerPawn*                  PlayerPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ExitSocketName                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGolfCartVehicleSK_C::OnPawnExitVehicle(class AFortPlayerPawn* PlayerPawn, class FName ExitSocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "OnPawnExitVehicle");

	Params::GolfCartVehicleSK_C_OnPawnExitVehicle Parms{};

	Parms.PlayerPawn = PlayerPawn;
	Parms.ExitSocketName = ExitSocketName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.RocketSpawned
// (BlueprintCallable, BlueprintEvent)

void AGolfCartVehicleSK_C::RocketSpawned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "RocketSpawned");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.OnWeaponEquipped
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortWeapon*                      NewWeapon                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AFortWeapon*                      PrevWeapon                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGolfCartVehicleSK_C::OnWeaponEquipped(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "OnWeaponEquipped");

	Params::GolfCartVehicleSK_C_OnWeaponEquipped Parms{};

	Parms.NewWeapon = NewWeapon;
	Parms.PrevWeapon = PrevWeapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.OnPawnEnterVehicle
// (Event, Public, BlueprintEvent)
// Parameters:
// class AFortPlayerPawn*                  PlayerPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SeatIdx                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGolfCartVehicleSK_C::OnPawnEnterVehicle(class AFortPlayerPawn* PlayerPawn, int32 SeatIdx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "OnPawnEnterVehicle");

	Params::GolfCartVehicleSK_C_OnPawnEnterVehicle Parms{};

	Parms.PlayerPawn = PlayerPawn;
	Parms.SeatIdx = SeatIdx;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.PedalForceFeedback
// (BlueprintCallable, BlueprintEvent)

void AGolfCartVehicleSK_C::PedalForceFeedback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "PedalForceFeedback");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.DropItems
// (BlueprintCallable, BlueprintEvent)

void AGolfCartVehicleSK_C::DropItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "DropItems");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.AttachToCart
// (BlueprintCallable, BlueprintEvent)

void AGolfCartVehicleSK_C::AttachToCart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "AttachToCart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AGolfCartVehicleSK_C::BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::GolfCartVehicleSK_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.ApplyImpulse
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AGolfCartVehicleSK_C::ApplyImpulse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "ApplyImpulse");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.OnCollisionHitEffects
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitNormalImpulse                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitFrictionImpulse                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitNormal                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPhysicalSurface                        HitSurfaceType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGolfCartVehicleSK_C::OnCollisionHitEffects(const struct FVector& HitLocation, const struct FVector& HitNormalImpulse, const struct FVector& HitFrictionImpulse, const struct FVector& HitNormal, class AActor* HitActor, EPhysicalSurface HitSurfaceType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "OnCollisionHitEffects");

	Params::GolfCartVehicleSK_C_OnCollisionHitEffects Parms{};

	Parms.HitLocation = std::move(HitLocation);
	Parms.HitNormalImpulse = std::move(HitNormalImpulse);
	Parms.HitFrictionImpulse = std::move(HitFrictionImpulse);
	Parms.HitNormal = std::move(HitNormal);
	Parms.HitActor = HitActor;
	Parms.HitSurfaceType = HitSurfaceType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.UpdateMovementCosmeticParameters
// (BlueprintCallable, BlueprintEvent)

void AGolfCartVehicleSK_C::UpdateMovementCosmeticParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "UpdateMovementCosmeticParameters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.OnDeathPlayEffects
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTagContainer            DamageTags                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FVector                          Momentum                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       HitInfo                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class AFortPawn*                        InstigatedBy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayEffectContextHandle     EffectContext                                          (BlueprintVisible, BlueprintReadOnly, Parm)

void AGolfCartVehicleSK_C::OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "OnDeathPlayEffects");

	Params::GolfCartVehicleSK_C_OnDeathPlayEffects Parms{};

	Parms.Damage = Damage;
	Parms.DamageTags = std::move(DamageTags);
	Parms.Momentum = std::move(Momentum);
	Parms.HitInfo = std::move(HitInfo);
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.EffectContext = std::move(EffectContext);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGolfCartVehicleSK_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "ReceiveTick");

	Params::GolfCartVehicleSK_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.OnCompleted_A0C9C97A4DE010E2D38107B3519D371C
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGolfCartVehicleSK_C::OnCompleted_A0C9C97A4DE010E2D38107B3519D371C(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "OnCompleted_A0C9C97A4DE010E2D38107B3519D371C");

	Params::GolfCartVehicleSK_C_OnCompleted_A0C9C97A4DE010E2D38107B3519D371C Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.OnBlendOut_A0C9C97A4DE010E2D38107B3519D371C
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGolfCartVehicleSK_C::OnBlendOut_A0C9C97A4DE010E2D38107B3519D371C(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "OnBlendOut_A0C9C97A4DE010E2D38107B3519D371C");

	Params::GolfCartVehicleSK_C_OnBlendOut_A0C9C97A4DE010E2D38107B3519D371C Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.OnInterrupted_A0C9C97A4DE010E2D38107B3519D371C
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGolfCartVehicleSK_C::OnInterrupted_A0C9C97A4DE010E2D38107B3519D371C(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "OnInterrupted_A0C9C97A4DE010E2D38107B3519D371C");

	Params::GolfCartVehicleSK_C_OnInterrupted_A0C9C97A4DE010E2D38107B3519D371C Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.OnNotifyBegin_A0C9C97A4DE010E2D38107B3519D371C
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGolfCartVehicleSK_C::OnNotifyBegin_A0C9C97A4DE010E2D38107B3519D371C(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "OnNotifyBegin_A0C9C97A4DE010E2D38107B3519D371C");

	Params::GolfCartVehicleSK_C_OnNotifyBegin_A0C9C97A4DE010E2D38107B3519D371C Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.OnNotifyEnd_A0C9C97A4DE010E2D38107B3519D371C
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGolfCartVehicleSK_C::OnNotifyEnd_A0C9C97A4DE010E2D38107B3519D371C(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "OnNotifyEnd_A0C9C97A4DE010E2D38107B3519D371C");

	Params::GolfCartVehicleSK_C_OnNotifyEnd_A0C9C97A4DE010E2D38107B3519D371C Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.BoostTimeline__UpdateFunc
// (BlueprintEvent)

void AGolfCartVehicleSK_C::BoostTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "BoostTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.BoostTimeline__FinishedFunc
// (BlueprintEvent)

void AGolfCartVehicleSK_C::BoostTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "BoostTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AGolfCartVehicleSK_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.OnRep_ImpulseVector
// (BlueprintCallable, BlueprintEvent)

void AGolfCartVehicleSK_C::OnRep_ImpulseVector()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "OnRep_ImpulseVector");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.AttachWeaponToCart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Selection                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGolfCartVehicleSK_C::AttachWeaponToCart(int32 Selection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "AttachWeaponToCart");

	Params::GolfCartVehicleSK_C_AttachWeaponToCart Parms{};

	Parms.Selection = Selection;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.PlayHapticsOnHit
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   HitMagnitude                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGolfCartVehicleSK_C::PlayHapticsOnHit(float HitMagnitude)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "PlayHapticsOnHit");

	Params::GolfCartVehicleSK_C_PlayHapticsOnHit Parms{};

	Parms.HitMagnitude = HitMagnitude;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.OnRep_CorrectiveImpulse
// (BlueprintCallable, BlueprintEvent)

void AGolfCartVehicleSK_C::OnRep_CorrectiveImpulse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "OnRep_CorrectiveImpulse");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.GetVehicleSeatActionNames
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortPlayerPawn*                  PlayerPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECommonInputType                        OverrideInputType                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class FName> AGolfCartVehicleSK_C::GetVehicleSeatActionNames(class AFortPlayerPawn* PlayerPawn, const ECommonInputType OverrideInputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "GetVehicleSeatActionNames");

	Params::GolfCartVehicleSK_C_GetVehicleSeatActionNames Parms{};

	Parms.PlayerPawn = PlayerPawn;
	Parms.OverrideInputType = OverrideInputType;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.GetVehicleSeatLabels
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortPlayerPawn*                  PlayerPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECommonInputType                        OverrideInputType                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FText>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class FText> AGolfCartVehicleSK_C::GetVehicleSeatLabels(class AFortPlayerPawn* PlayerPawn, const ECommonInputType OverrideInputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "GetVehicleSeatLabels");

	Params::GolfCartVehicleSK_C_GetVehicleSeatLabels Parms{};

	Parms.PlayerPawn = PlayerPawn;
	Parms.OverrideInputType = OverrideInputType;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.GetVehicleSeatActionLabels
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortPlayerPawn*                  PlayerPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECommonInputType                        OverrideInputType                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FText>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class FText> AGolfCartVehicleSK_C::GetVehicleSeatActionLabels(class AFortPlayerPawn* PlayerPawn, const ECommonInputType OverrideInputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "GetVehicleSeatActionLabels");

	Params::GolfCartVehicleSK_C_GetVehicleSeatActionLabels Parms{};

	Parms.PlayerPawn = PlayerPawn;
	Parms.OverrideInputType = OverrideInputType;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.OnRep_ImpactLocation
// (BlueprintCallable, BlueprintEvent)

void AGolfCartVehicleSK_C::OnRep_ImpactLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "OnRep_ImpactLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.DestroyOrDamageBuildingPiece
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABuildingActor*                   BuildingActor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CheckForHealth                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UClass*                           GameplayEffectClass                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DestroyThreshold                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGolfCartVehicleSK_C::DestroyOrDamageBuildingPiece(class ABuildingActor* BuildingActor, bool CheckForHealth, class UClass* GameplayEffectClass, float DestroyThreshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "DestroyOrDamageBuildingPiece");

	Params::GolfCartVehicleSK_C_DestroyOrDamageBuildingPiece Parms{};

	Parms.BuildingActor = BuildingActor;
	Parms.CheckForHealth = CheckForHealth;
	Parms.GameplayEffectClass = GameplayEffectClass;
	Parms.DestroyThreshold = DestroyThreshold;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.SendHeadlightValueToMaterials
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ParameterValue                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGolfCartVehicleSK_C::SendHeadlightValueToMaterials(const float ParameterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "SendHeadlightValueToMaterials");

	Params::GolfCartVehicleSK_C_SendHeadlightValueToMaterials Parms{};

	Parms.ParameterValue = ParameterValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.SendDamageValueToMaterials
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ParameterValue                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGolfCartVehicleSK_C::SendDamageValueToMaterials(const float ParameterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "SendDamageValueToMaterials");

	Params::GolfCartVehicleSK_C_SendDamageValueToMaterials Parms{};

	Parms.ParameterValue = ParameterValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.SendBoostTimeToMaterials
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ParameterValue                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGolfCartVehicleSK_C::SendBoostTimeToMaterials(const float ParameterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "SendBoostTimeToMaterials");

	Params::GolfCartVehicleSK_C_SendBoostTimeToMaterials Parms{};

	Parms.ParameterValue = ParameterValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.GetVehicleSeatPrimaryAction
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AFortPlayerPawn*                  FortPlayerPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class FName AGolfCartVehicleSK_C::GetVehicleSeatPrimaryAction(class AFortPlayerPawn* FortPlayerPawn) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "GetVehicleSeatPrimaryAction");

	Params::GolfCartVehicleSK_C_GetVehicleSeatPrimaryAction Parms{};

	Parms.FortPlayerPawn = FortPlayerPawn;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GolfCartVehicleSK.GolfCartVehicleSK_C.GetIconPlacement
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AActor*                           SelfActor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OutLocation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OutExtents                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGolfCartVehicleSK_C::GetIconPlacement(class AActor* SelfActor, struct FVector* OutLocation, struct FVector* OutExtents) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GolfCartVehicleSK_C", "GetIconPlacement");

	Params::GolfCartVehicleSK_C_GetIconPlacement Parms{};

	Parms.SelfActor = SelfActor;

	UObject::ProcessEvent(Func, &Parms);

	if (OutLocation != nullptr)
		*OutLocation = std::move(Parms.OutLocation);

	if (OutExtents != nullptr)
		*OutExtents = std::move(Parms.OutExtents);
}

}

