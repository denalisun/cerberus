#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CUBE

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "CubeStruct_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass CUBE.CUBE_C
// 0x0708 (0x0E70 - 0x0768)
class ACUBE_C final : public ABuildingGameplayActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0768(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        AmbientAudio;                                      // 0x0770(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0778(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0780(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LakeTimeline_Vectortrack_46D4818442D63D3EF0E04BB124CC5D90; // 0x0788(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LakeTimeline_CubeMovement_46D4818442D63D3EF0E04BB124CC5D90; // 0x0794(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            LakeTimeline__Direction_46D4818442D63D3EF0E04BB124CC5D90; // 0x0798(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_799[0x7];                                      // 0x0799(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     LakeTimeline;                                      // 0x07A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CubeAppearGlow_Glow_33F5C90741462707C010C785CF1397D6; // 0x07A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            CubeAppearGlow__Direction_33F5C90741462707C010C785CF1397D6; // 0x07AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7AD[0x3];                                      // 0x07AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     CubeAppearGlow;                                    // 0x07B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RuneEffect_NewTrack_0_D0367CB34A1CE7B75476B3AC031AE666; // 0x07B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            RuneEffect__Direction_D0367CB34A1CE7B75476B3AC031AE666; // 0x07BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7BD[0x3];                                      // 0x07BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     RuneEffect;                                        // 0x07C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FinalSinkTimeline__Direction_A2C7BC3544C52543A3F11E824C06D673; // 0x07C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C9[0x7];                                      // 0x07C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FinalSinkTimeline;                                 // 0x07D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RollTimeline_Percent_Complete_4CCDB9044D0CBFCF7DBC0F8942AEF43D; // 0x07D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RollTimeline_Tip_Amount_4CCDB9044D0CBFCF7DBC0F8942AEF43D; // 0x07DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            RollTimeline__Direction_4CCDB9044D0CBFCF7DBC0F8942AEF43D; // 0x07E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7E1[0x7];                                      // 0x07E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     RollTimeline;                                      // 0x07E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DuplicateIndex;                                    // 0x07F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PreviewTime;                                       // 0x07F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x07F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                          Debug_Up;                                          // 0x07F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7FA[0x2];                                      // 0x07FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PathIndex;                                         // 0x07FC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             NewTransform;                                      // 0x0800(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             OldTransform;                                      // 0x0830(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         PlayRate;                                          // 0x0860(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_864[0x4];                                      // 0x0864(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Corners;                                           // 0x0868(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FVector>                        Faces;                                             // 0x0878(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FVector>                        ClosestCorners;                                    // 0x0888(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         TraceDistance;                                     // 0x0898(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AveragePos;                                        // 0x089C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpulsePlayerStrength;                             // 0x08A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpulseZStrength;                                  // 0x08AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpulseZStrengthWalking;                           // 0x08B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B4[0xC];                                      // 0x08B4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             NewTransformPt2;                                   // 0x08C0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         SnapToGround;                                      // 0x08F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TwoPartTransform;                                  // 0x08F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F5[0xB];                                      // 0x08F5(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SetTransform;                                      // 0x0900(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class AActor*>                         IgnoreArray;                                       // 0x0930(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         DrawLast;                                          // 0x0940(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoving;                                          // 0x0944(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_945[0x3];                                      // 0x0945(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCubeStruct>                    Steps;                                             // 0x0948(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	uint8                                         Pad_958[0x8];                                      // 0x0958(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCubeStruct                            CurrentStep;                                       // 0x0960(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         SealNumber;                                        // 0x09A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9A1[0x3];                                      // 0x09A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EventNumberOfDays;                                 // 0x09A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              TimeUntilEnd;                                      // 0x09A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         NormalizedProgress;                                // 0x09B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9B4[0x4];                                      // 0x09B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Curve;                                             // 0x09B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurveLookup;                                       // 0x09C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InitialSetup;                                      // 0x09C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9C5[0x3];                                      // 0x09C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         EventsToBindTo;                                    // 0x09C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<int32>                                 Runes;                                             // 0x09D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TMap<int32, class UCurveFloat*>               ProgressCurves;                                    // 0x09E8(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class FString                                 LastEventName;                                     // 0x0A38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FTimespan                              EventTimeTotal;                                    // 0x0A48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        TempDust;                                          // 0x0A50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CubeVisibleWithCollision;                          // 0x0A58(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          CubeTurnedOn;                                      // 0x0A59(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_A5A[0x6];                                      // 0x0A5A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RealStepsPerRune;                                  // 0x0A60(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	class ABGA_Cube_Area_Effect_C*                LowGravZoneActor;                                  // 0x0A70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RuneDestination;                                   // 0x0A78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A7C[0x4];                                      // 0x0A7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   CubeSetupComplete;                                 // 0x0A80(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0A90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PrintingRune;                                      // 0x0A98(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_A99[0x3];                                      // 0x0A99(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NewVar_0;                                          // 0x0A9C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AA4[0x4];                                      // 0x0AA4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   StopRuneGlow;                                      // 0x0AA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         CubeAppearEffectTime;                              // 0x0AB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_ABC[0x4];                                      // 0x0ABC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        CubeSpawnEmitter;                                  // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AudioAmbFadeTime;                                  // 0x0AC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAudioDebugEnabled;                                // 0x0ACC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_ACD[0x3];                                      // 0x0ACD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             AudioOnLaunchPlayer;                               // 0x0AD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             AudioRoll;                                         // 0x0AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             AudioRoll_2Part_1;                                 // 0x0AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             AudioRoll_2Part_1_End;                             // 0x0AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             AudioRoll_2Part_2;                                 // 0x0AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             AudioRollLand;                                     // 0x0AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            RollAmbientVolumeCurve;                            // 0x0B00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            RollAmbientPitchCurve;                             // 0x0B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RollEndOffsetTime;                                 // 0x0B10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageAccumulated;                                 // 0x0B14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayerToZap;                                       // 0x0B18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1C[0x4];                                      // 0x0B1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACubeOverlapActor_C*                    OverlapActor;                                      // 0x0B20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CubeSpawnEffects;                                  // 0x0B28(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_B29[0x7];                                      // 0x0B29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         CubeDamageThreshold;                               // 0x0B30(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         ImpulseVehicleStrength;                            // 0x0B50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B54[0x4];                                      // 0x0B54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortAthenaVehicle*                     ImpulsedVehicle;                                   // 0x0B58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTransform>                     RuneLocations;                                     // 0x0B60(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	class USoundBase*                             AudioPrintLoop;                                    // 0x0B70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        RunePrintAudioComp;                                // 0x0B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             AudioPrintStart;                                   // 0x0B80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             AudioSpawn;                                        // 0x0B88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             AudioSpawnDustAppear;                              // 0x0B90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   LandedAtRune;                                      // 0x0B98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<int32, float>                            WoodsSteps;                                        // 0x0BA8(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         DebugGameTime;                                     // 0x0BF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DestinationTimeOfDay;                              // 0x0BFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SecondsUntilspawn;                                 // 0x0C00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C04[0x4];                                      // 0x0C04(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   CubeReady;                                         // 0x0C08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class USoundBase*                             AudioOnLaunchPlayerVocal;                          // 0x0C18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewVar_1;                                          // 0x0C20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C21[0x7];                                      // 0x0C21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 KeyframesPerRune;                                  // 0x0C28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         TryPathIndex;                                      // 0x0C38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C3C[0x4];                                      // 0x0C3C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CubeLoopFX;                                        // 0x0C40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpulseStrengthZVehicle;                           // 0x0C48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4C[0x4];                                      // 0x0C4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           SpawnCubeTimer;                                    // 0x0C50(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   CubeLeftPosition;                                  // 0x0C58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	uint8                                         Pad_C68[0x8];                                      // 0x0C68(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RollForwardTransform;                              // 0x0C70(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FCubeStruct>                    TempSteps;                                         // 0x0CA0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class APlayerPawn_Athena_C*>           LastLaunchedPlayer;                                // 0x0CB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	TMap<int32, struct FTransform>                CorrectiveTransforms;                              // 0x0CC0(0x0050)(Edit, BlueprintVisible, ZeroConstructor)
	bool                                          GravVolumesSpawned;                                // 0x0D10(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_D11[0x7];                                      // 0x0D11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         ImpulseStrengthPlayer;                             // 0x0D18(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         ImpulseStrengthVehicle;                            // 0x0D38(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         ImpulseVehicleZ;                                   // 0x0D58(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         ImpulsePlayerZ;                                    // 0x0D78(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         ImpulsePlayerZWalking;                             // 0x0D98(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           RetriggerCleanupTimer;                             // 0x0DB8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ACube_Dest_Scripting_C*                 CubeDestBlueprint;                                 // 0x0DC0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAtLake;                                          // 0x0DC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DC9[0x3];                                      // 0x0DC9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkyStartingIntensity;                              // 0x0DCC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             LerpFrom;                                          // 0x0DD0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             LerpTo;                                            // 0x0E00(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             AudioRollLandLake;                                 // 0x0E30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TiltedHit;                                         // 0x0E38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DestTurnedOn;                                      // 0x0E39(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_E3A[0x6];                                      // 0x0E3A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABGA_Cube_Area_Effect_C*>        AreaActors;                                        // 0x0E40(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class UStaticMeshComponent*>           LowGravSphereArray;                                // 0x0E50(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UStaticMeshComponent*                   DistantLakeGlow;                                   // 0x0E60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CubeSetupComplete__DelegateSignature(int32 CurrentIndex);
	void StopRuneGlow__DelegateSignature();
	void LandedAtRune__DelegateSignature(int32 Index_0);
	void CubeReady__DelegateSignature();
	void CubeLeftPosition__DelegateSignature();
	void ExecuteUbergraph_CUBE(int32 EntryPoint);
	void ResetImpulseTimer();
	void TurnOn();
	void Reset();
	void ReceiveBeginPlay();
	void Next(int32 NewParam);
	void SetupLake();
	void Tilted_Impact_Sound();
	void ReplayScrubSetup();
	void End_Roll_Audio_Lake();
	void New(int32 NewParam);
	void ReplayScrubbed();
	void CubeAppear();
	void On_Amb_Zap_Spawn(class FName EventName, float EmitterTime, const struct FVector& Location, const struct FVector& Velocity);
	void ClearLastLaunchedPlayer();
	void Rollforward();
	void CubeLeftPathPoint();
	void LeftRuneLocation();
	void ContinueSetup();
	void On_Spawn_Dust_Appear(class FName EventName, float EmitterTime, const struct FVector& Location, const struct FVector& Velocity);
	void Set_Rune_Print_Audio_Enabled(bool Enabled);
	void CrushPlayer(class AActor* Actor);
	void OnDamagePlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void TestForCrushOnHit(float Trace_Distance);
	void CubeSpawnEffect();
	void Update_Roll_Audio(float Percent_Complete);
	void End_Roll_Audio();
	void Start_Roll_Audio_Part_2();
	void Start_Roll_Audio_Part_1(bool Is_2_Part_Roll);
	void Set_Ambient_Audio_Enabled(bool Enabled);
	void SpawnCube();
	void SetRuneGlow(bool Active);
	void ResetRollInit();
	void RippleGC(const struct FVector& Location, const struct FVector& Normal, class AActor* Source, float Scale);
	void Show();
	void CalcStepsPerRuneIndex();
	void ImpactLake();
	void CubeRollFeedback();
	void IncrementIndex();
	void ClearStartingPosition();
	void StartRuneSequence(bool StartMidway);
	void FindDownFaces();
	void PlayFinalSink();
	void ThreeMinus_DuplicateSpecified();
	void SwapLast2Indicies();
	void TwoPartTransitionEvent();
	void TwoMinus_DeleteLastIndex();
	void One_Minus_DupLastIndex();
	void PerformStep();
	void OnDamageServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnEventActive_750DF2F749472DA252073089796089C8(const class FString& EventName, const struct FTimespan& TimeUntilEnd_0, const struct FTimespan& TimeSinceBegin, float TimespanRatio);
	void OnEventUpdated_750DF2F749472DA252073089796089C8(const class FString& EventName, const struct FTimespan& TimeUntilEnd_0, const struct FTimespan& TimeSinceBegin, float TimespanRatio);
	void OnEventEnded_750DF2F749472DA252073089796089C8(const class FString& EventName, const struct FTimespan& TimeUntilEnd_0, const struct FTimespan& TimeSinceBegin, float TimespanRatio);
	void OnEventActive_2648B1B24D74D365B5C956ACA1EAECB0(const class FString& EventName, const struct FTimespan& TimeUntilEnd_0, const struct FTimespan& TimeSinceBegin, float TimespanRatio);
	void OnEventUpdated_2648B1B24D74D365B5C956ACA1EAECB0(const class FString& EventName, const struct FTimespan& TimeUntilEnd_0, const struct FTimespan& TimeSinceBegin, float TimespanRatio);
	void OnEventEnded_2648B1B24D74D365B5C956ACA1EAECB0(const class FString& EventName, const struct FTimespan& TimeUntilEnd_0, const struct FTimespan& TimeSinceBegin, float TimespanRatio);
	void OnEventActive_16C2560C48CD325DC3C47CA23BEBB2C9(const class FString& EventName, const struct FTimespan& TimeUntilEnd_0, const struct FTimespan& TimeSinceBegin, float TimespanRatio);
	void OnEventUpdated_16C2560C48CD325DC3C47CA23BEBB2C9(const class FString& EventName, const struct FTimespan& TimeUntilEnd_0, const struct FTimespan& TimeSinceBegin, float TimespanRatio);
	void OnEventEnded_16C2560C48CD325DC3C47CA23BEBB2C9(const class FString& EventName, const struct FTimespan& TimeUntilEnd_0, const struct FTimespan& TimeSinceBegin, float TimespanRatio);
	void RollTimeline__UpdateFunc();
	void RollTimeline__FinishedFunc();
	void LakeTimeline__TurnOn__EventFunc();
	void LakeTimeline__DoneSinking__EventFunc();
	void LakeTimeline__UpdateFunc();
	void LakeTimeline__FinishedFunc();
	void CubeAppearGlow__UpdateFunc();
	void CubeAppearGlow__FinishedFunc();
	void RuneEffect__UpdateFunc();
	void RuneEffect__FinishedFunc();
	void FinalSinkTimeline__UpdateFunc();
	void FinalSinkTimeline__FinishedFunc();
	void UserConstructionScript();
	void FindBottomFace(const struct FTransform& Transform, struct FVector* Downward_Face);
	void LaunchPlayerAway(const struct FVector& HitLocation, const struct FVector& HitNormal, class APlayerPawn_Athena_C* Player, float ForceMultiplier, bool FlashCube);
	bool ShouldDie(float Damage, class AController* EventInstigator, class AActor* DamageCauser);
	void OnRep_PathIndex();
	void DoFindDownFace(int32 StepToTest, int32* FaceIndex);
	void OnRep_StartingIndex();
	void TraceCubeShape(bool* Hit);
	void CalculateNextMove(const struct FTimespan& TimespanTillEnd, int32 RuneDestination_0, int32* NextIndex, float* SecondsTillMove);
	void UnhideAndSetCollision(bool TurnedOn);
	void OnRep_CubeHidden();
	void OnRep_CubeTurnedOn();
	void StepsThisRuneIndex(int32 RuneDestination_0);
	void CalcRuneSteps();
	void OnRep_PrintingRune();
	void OnRep_CubeSpawn();
	void Set_Tree_MPC(bool AtStartup);
	void SetSpecificTimeOfDay(float Seconds);
	void ImpulseVehicle(class AFortAthenaVehicle* Vehicle, const struct FVector& Normal, const struct FVector& Location, float ZMultiplier);
	void OnRep_GravVolumesSpawned();
	bool IsLakeSplash();
	void OnRep_DestTurnedOn();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CUBE_C">();
	}
	static class ACUBE_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACUBE_C>();
	}
};
static_assert(alignof(ACUBE_C) == 0x000010, "Wrong alignment on ACUBE_C");
static_assert(sizeof(ACUBE_C) == 0x000E70, "Wrong size on ACUBE_C");
static_assert(offsetof(ACUBE_C, UberGraphFrame) == 0x000768, "Member 'ACUBE_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ACUBE_C, AmbientAudio) == 0x000770, "Member 'ACUBE_C::AmbientAudio' has a wrong offset!");
static_assert(offsetof(ACUBE_C, StaticMesh) == 0x000778, "Member 'ACUBE_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ACUBE_C, DefaultSceneRoot) == 0x000780, "Member 'ACUBE_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ACUBE_C, LakeTimeline_Vectortrack_46D4818442D63D3EF0E04BB124CC5D90) == 0x000788, "Member 'ACUBE_C::LakeTimeline_Vectortrack_46D4818442D63D3EF0E04BB124CC5D90' has a wrong offset!");
static_assert(offsetof(ACUBE_C, LakeTimeline_CubeMovement_46D4818442D63D3EF0E04BB124CC5D90) == 0x000794, "Member 'ACUBE_C::LakeTimeline_CubeMovement_46D4818442D63D3EF0E04BB124CC5D90' has a wrong offset!");
static_assert(offsetof(ACUBE_C, LakeTimeline__Direction_46D4818442D63D3EF0E04BB124CC5D90) == 0x000798, "Member 'ACUBE_C::LakeTimeline__Direction_46D4818442D63D3EF0E04BB124CC5D90' has a wrong offset!");
static_assert(offsetof(ACUBE_C, LakeTimeline) == 0x0007A0, "Member 'ACUBE_C::LakeTimeline' has a wrong offset!");
static_assert(offsetof(ACUBE_C, CubeAppearGlow_Glow_33F5C90741462707C010C785CF1397D6) == 0x0007A8, "Member 'ACUBE_C::CubeAppearGlow_Glow_33F5C90741462707C010C785CF1397D6' has a wrong offset!");
static_assert(offsetof(ACUBE_C, CubeAppearGlow__Direction_33F5C90741462707C010C785CF1397D6) == 0x0007AC, "Member 'ACUBE_C::CubeAppearGlow__Direction_33F5C90741462707C010C785CF1397D6' has a wrong offset!");
static_assert(offsetof(ACUBE_C, CubeAppearGlow) == 0x0007B0, "Member 'ACUBE_C::CubeAppearGlow' has a wrong offset!");
static_assert(offsetof(ACUBE_C, RuneEffect_NewTrack_0_D0367CB34A1CE7B75476B3AC031AE666) == 0x0007B8, "Member 'ACUBE_C::RuneEffect_NewTrack_0_D0367CB34A1CE7B75476B3AC031AE666' has a wrong offset!");
static_assert(offsetof(ACUBE_C, RuneEffect__Direction_D0367CB34A1CE7B75476B3AC031AE666) == 0x0007BC, "Member 'ACUBE_C::RuneEffect__Direction_D0367CB34A1CE7B75476B3AC031AE666' has a wrong offset!");
static_assert(offsetof(ACUBE_C, RuneEffect) == 0x0007C0, "Member 'ACUBE_C::RuneEffect' has a wrong offset!");
static_assert(offsetof(ACUBE_C, FinalSinkTimeline__Direction_A2C7BC3544C52543A3F11E824C06D673) == 0x0007C8, "Member 'ACUBE_C::FinalSinkTimeline__Direction_A2C7BC3544C52543A3F11E824C06D673' has a wrong offset!");
static_assert(offsetof(ACUBE_C, FinalSinkTimeline) == 0x0007D0, "Member 'ACUBE_C::FinalSinkTimeline' has a wrong offset!");
static_assert(offsetof(ACUBE_C, RollTimeline_Percent_Complete_4CCDB9044D0CBFCF7DBC0F8942AEF43D) == 0x0007D8, "Member 'ACUBE_C::RollTimeline_Percent_Complete_4CCDB9044D0CBFCF7DBC0F8942AEF43D' has a wrong offset!");
static_assert(offsetof(ACUBE_C, RollTimeline_Tip_Amount_4CCDB9044D0CBFCF7DBC0F8942AEF43D) == 0x0007DC, "Member 'ACUBE_C::RollTimeline_Tip_Amount_4CCDB9044D0CBFCF7DBC0F8942AEF43D' has a wrong offset!");
static_assert(offsetof(ACUBE_C, RollTimeline__Direction_4CCDB9044D0CBFCF7DBC0F8942AEF43D) == 0x0007E0, "Member 'ACUBE_C::RollTimeline__Direction_4CCDB9044D0CBFCF7DBC0F8942AEF43D' has a wrong offset!");
static_assert(offsetof(ACUBE_C, RollTimeline) == 0x0007E8, "Member 'ACUBE_C::RollTimeline' has a wrong offset!");
static_assert(offsetof(ACUBE_C, DuplicateIndex) == 0x0007F0, "Member 'ACUBE_C::DuplicateIndex' has a wrong offset!");
static_assert(offsetof(ACUBE_C, PreviewTime) == 0x0007F4, "Member 'ACUBE_C::PreviewTime' has a wrong offset!");
static_assert(offsetof(ACUBE_C, Debug) == 0x0007F8, "Member 'ACUBE_C::Debug' has a wrong offset!");
static_assert(offsetof(ACUBE_C, Debug_Up) == 0x0007F9, "Member 'ACUBE_C::Debug_Up' has a wrong offset!");
static_assert(offsetof(ACUBE_C, PathIndex) == 0x0007FC, "Member 'ACUBE_C::PathIndex' has a wrong offset!");
static_assert(offsetof(ACUBE_C, NewTransform) == 0x000800, "Member 'ACUBE_C::NewTransform' has a wrong offset!");
static_assert(offsetof(ACUBE_C, OldTransform) == 0x000830, "Member 'ACUBE_C::OldTransform' has a wrong offset!");
static_assert(offsetof(ACUBE_C, PlayRate) == 0x000860, "Member 'ACUBE_C::PlayRate' has a wrong offset!");
static_assert(offsetof(ACUBE_C, Corners) == 0x000868, "Member 'ACUBE_C::Corners' has a wrong offset!");
static_assert(offsetof(ACUBE_C, Faces) == 0x000878, "Member 'ACUBE_C::Faces' has a wrong offset!");
static_assert(offsetof(ACUBE_C, ClosestCorners) == 0x000888, "Member 'ACUBE_C::ClosestCorners' has a wrong offset!");
static_assert(offsetof(ACUBE_C, TraceDistance) == 0x000898, "Member 'ACUBE_C::TraceDistance' has a wrong offset!");
static_assert(offsetof(ACUBE_C, AveragePos) == 0x00089C, "Member 'ACUBE_C::AveragePos' has a wrong offset!");
static_assert(offsetof(ACUBE_C, ImpulsePlayerStrength) == 0x0008A8, "Member 'ACUBE_C::ImpulsePlayerStrength' has a wrong offset!");
static_assert(offsetof(ACUBE_C, ImpulseZStrength) == 0x0008AC, "Member 'ACUBE_C::ImpulseZStrength' has a wrong offset!");
static_assert(offsetof(ACUBE_C, ImpulseZStrengthWalking) == 0x0008B0, "Member 'ACUBE_C::ImpulseZStrengthWalking' has a wrong offset!");
static_assert(offsetof(ACUBE_C, NewTransformPt2) == 0x0008C0, "Member 'ACUBE_C::NewTransformPt2' has a wrong offset!");
static_assert(offsetof(ACUBE_C, SnapToGround) == 0x0008F0, "Member 'ACUBE_C::SnapToGround' has a wrong offset!");
static_assert(offsetof(ACUBE_C, TwoPartTransform) == 0x0008F4, "Member 'ACUBE_C::TwoPartTransform' has a wrong offset!");
static_assert(offsetof(ACUBE_C, SetTransform) == 0x000900, "Member 'ACUBE_C::SetTransform' has a wrong offset!");
static_assert(offsetof(ACUBE_C, IgnoreArray) == 0x000930, "Member 'ACUBE_C::IgnoreArray' has a wrong offset!");
static_assert(offsetof(ACUBE_C, DrawLast) == 0x000940, "Member 'ACUBE_C::DrawLast' has a wrong offset!");
static_assert(offsetof(ACUBE_C, IsMoving) == 0x000944, "Member 'ACUBE_C::IsMoving' has a wrong offset!");
static_assert(offsetof(ACUBE_C, Steps) == 0x000948, "Member 'ACUBE_C::Steps' has a wrong offset!");
static_assert(offsetof(ACUBE_C, CurrentStep) == 0x000960, "Member 'ACUBE_C::CurrentStep' has a wrong offset!");
static_assert(offsetof(ACUBE_C, SealNumber) == 0x0009A0, "Member 'ACUBE_C::SealNumber' has a wrong offset!");
static_assert(offsetof(ACUBE_C, EventNumberOfDays) == 0x0009A4, "Member 'ACUBE_C::EventNumberOfDays' has a wrong offset!");
static_assert(offsetof(ACUBE_C, TimeUntilEnd) == 0x0009A8, "Member 'ACUBE_C::TimeUntilEnd' has a wrong offset!");
static_assert(offsetof(ACUBE_C, NormalizedProgress) == 0x0009B0, "Member 'ACUBE_C::NormalizedProgress' has a wrong offset!");
static_assert(offsetof(ACUBE_C, Curve) == 0x0009B8, "Member 'ACUBE_C::Curve' has a wrong offset!");
static_assert(offsetof(ACUBE_C, CurveLookup) == 0x0009C0, "Member 'ACUBE_C::CurveLookup' has a wrong offset!");
static_assert(offsetof(ACUBE_C, InitialSetup) == 0x0009C4, "Member 'ACUBE_C::InitialSetup' has a wrong offset!");
static_assert(offsetof(ACUBE_C, EventsToBindTo) == 0x0009C8, "Member 'ACUBE_C::EventsToBindTo' has a wrong offset!");
static_assert(offsetof(ACUBE_C, Runes) == 0x0009D8, "Member 'ACUBE_C::Runes' has a wrong offset!");
static_assert(offsetof(ACUBE_C, ProgressCurves) == 0x0009E8, "Member 'ACUBE_C::ProgressCurves' has a wrong offset!");
static_assert(offsetof(ACUBE_C, LastEventName) == 0x000A38, "Member 'ACUBE_C::LastEventName' has a wrong offset!");
static_assert(offsetof(ACUBE_C, EventTimeTotal) == 0x000A48, "Member 'ACUBE_C::EventTimeTotal' has a wrong offset!");
static_assert(offsetof(ACUBE_C, TempDust) == 0x000A50, "Member 'ACUBE_C::TempDust' has a wrong offset!");
static_assert(offsetof(ACUBE_C, CubeVisibleWithCollision) == 0x000A58, "Member 'ACUBE_C::CubeVisibleWithCollision' has a wrong offset!");
static_assert(offsetof(ACUBE_C, CubeTurnedOn) == 0x000A59, "Member 'ACUBE_C::CubeTurnedOn' has a wrong offset!");
static_assert(offsetof(ACUBE_C, RealStepsPerRune) == 0x000A60, "Member 'ACUBE_C::RealStepsPerRune' has a wrong offset!");
static_assert(offsetof(ACUBE_C, LowGravZoneActor) == 0x000A70, "Member 'ACUBE_C::LowGravZoneActor' has a wrong offset!");
static_assert(offsetof(ACUBE_C, RuneDestination) == 0x000A78, "Member 'ACUBE_C::RuneDestination' has a wrong offset!");
static_assert(offsetof(ACUBE_C, CubeSetupComplete) == 0x000A80, "Member 'ACUBE_C::CubeSetupComplete' has a wrong offset!");
static_assert(offsetof(ACUBE_C, Mid) == 0x000A90, "Member 'ACUBE_C::Mid' has a wrong offset!");
static_assert(offsetof(ACUBE_C, PrintingRune) == 0x000A98, "Member 'ACUBE_C::PrintingRune' has a wrong offset!");
static_assert(offsetof(ACUBE_C, NewVar_0) == 0x000A9C, "Member 'ACUBE_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(ACUBE_C, StopRuneGlow) == 0x000AA8, "Member 'ACUBE_C::StopRuneGlow' has a wrong offset!");
static_assert(offsetof(ACUBE_C, CubeAppearEffectTime) == 0x000AB8, "Member 'ACUBE_C::CubeAppearEffectTime' has a wrong offset!");
static_assert(offsetof(ACUBE_C, CubeSpawnEmitter) == 0x000AC0, "Member 'ACUBE_C::CubeSpawnEmitter' has a wrong offset!");
static_assert(offsetof(ACUBE_C, AudioAmbFadeTime) == 0x000AC8, "Member 'ACUBE_C::AudioAmbFadeTime' has a wrong offset!");
static_assert(offsetof(ACUBE_C, bAudioDebugEnabled) == 0x000ACC, "Member 'ACUBE_C::bAudioDebugEnabled' has a wrong offset!");
static_assert(offsetof(ACUBE_C, AudioOnLaunchPlayer) == 0x000AD0, "Member 'ACUBE_C::AudioOnLaunchPlayer' has a wrong offset!");
static_assert(offsetof(ACUBE_C, AudioRoll) == 0x000AD8, "Member 'ACUBE_C::AudioRoll' has a wrong offset!");
static_assert(offsetof(ACUBE_C, AudioRoll_2Part_1) == 0x000AE0, "Member 'ACUBE_C::AudioRoll_2Part_1' has a wrong offset!");
static_assert(offsetof(ACUBE_C, AudioRoll_2Part_1_End) == 0x000AE8, "Member 'ACUBE_C::AudioRoll_2Part_1_End' has a wrong offset!");
static_assert(offsetof(ACUBE_C, AudioRoll_2Part_2) == 0x000AF0, "Member 'ACUBE_C::AudioRoll_2Part_2' has a wrong offset!");
static_assert(offsetof(ACUBE_C, AudioRollLand) == 0x000AF8, "Member 'ACUBE_C::AudioRollLand' has a wrong offset!");
static_assert(offsetof(ACUBE_C, RollAmbientVolumeCurve) == 0x000B00, "Member 'ACUBE_C::RollAmbientVolumeCurve' has a wrong offset!");
static_assert(offsetof(ACUBE_C, RollAmbientPitchCurve) == 0x000B08, "Member 'ACUBE_C::RollAmbientPitchCurve' has a wrong offset!");
static_assert(offsetof(ACUBE_C, RollEndOffsetTime) == 0x000B10, "Member 'ACUBE_C::RollEndOffsetTime' has a wrong offset!");
static_assert(offsetof(ACUBE_C, DamageAccumulated) == 0x000B14, "Member 'ACUBE_C::DamageAccumulated' has a wrong offset!");
static_assert(offsetof(ACUBE_C, PlayerToZap) == 0x000B18, "Member 'ACUBE_C::PlayerToZap' has a wrong offset!");
static_assert(offsetof(ACUBE_C, OverlapActor) == 0x000B20, "Member 'ACUBE_C::OverlapActor' has a wrong offset!");
static_assert(offsetof(ACUBE_C, CubeSpawnEffects) == 0x000B28, "Member 'ACUBE_C::CubeSpawnEffects' has a wrong offset!");
static_assert(offsetof(ACUBE_C, CubeDamageThreshold) == 0x000B30, "Member 'ACUBE_C::CubeDamageThreshold' has a wrong offset!");
static_assert(offsetof(ACUBE_C, ImpulseVehicleStrength) == 0x000B50, "Member 'ACUBE_C::ImpulseVehicleStrength' has a wrong offset!");
static_assert(offsetof(ACUBE_C, ImpulsedVehicle) == 0x000B58, "Member 'ACUBE_C::ImpulsedVehicle' has a wrong offset!");
static_assert(offsetof(ACUBE_C, RuneLocations) == 0x000B60, "Member 'ACUBE_C::RuneLocations' has a wrong offset!");
static_assert(offsetof(ACUBE_C, AudioPrintLoop) == 0x000B70, "Member 'ACUBE_C::AudioPrintLoop' has a wrong offset!");
static_assert(offsetof(ACUBE_C, RunePrintAudioComp) == 0x000B78, "Member 'ACUBE_C::RunePrintAudioComp' has a wrong offset!");
static_assert(offsetof(ACUBE_C, AudioPrintStart) == 0x000B80, "Member 'ACUBE_C::AudioPrintStart' has a wrong offset!");
static_assert(offsetof(ACUBE_C, AudioSpawn) == 0x000B88, "Member 'ACUBE_C::AudioSpawn' has a wrong offset!");
static_assert(offsetof(ACUBE_C, AudioSpawnDustAppear) == 0x000B90, "Member 'ACUBE_C::AudioSpawnDustAppear' has a wrong offset!");
static_assert(offsetof(ACUBE_C, LandedAtRune) == 0x000B98, "Member 'ACUBE_C::LandedAtRune' has a wrong offset!");
static_assert(offsetof(ACUBE_C, WoodsSteps) == 0x000BA8, "Member 'ACUBE_C::WoodsSteps' has a wrong offset!");
static_assert(offsetof(ACUBE_C, DebugGameTime) == 0x000BF8, "Member 'ACUBE_C::DebugGameTime' has a wrong offset!");
static_assert(offsetof(ACUBE_C, DestinationTimeOfDay) == 0x000BFC, "Member 'ACUBE_C::DestinationTimeOfDay' has a wrong offset!");
static_assert(offsetof(ACUBE_C, SecondsUntilspawn) == 0x000C00, "Member 'ACUBE_C::SecondsUntilspawn' has a wrong offset!");
static_assert(offsetof(ACUBE_C, CubeReady) == 0x000C08, "Member 'ACUBE_C::CubeReady' has a wrong offset!");
static_assert(offsetof(ACUBE_C, AudioOnLaunchPlayerVocal) == 0x000C18, "Member 'ACUBE_C::AudioOnLaunchPlayerVocal' has a wrong offset!");
static_assert(offsetof(ACUBE_C, NewVar_1) == 0x000C20, "Member 'ACUBE_C::NewVar_1' has a wrong offset!");
static_assert(offsetof(ACUBE_C, KeyframesPerRune) == 0x000C28, "Member 'ACUBE_C::KeyframesPerRune' has a wrong offset!");
static_assert(offsetof(ACUBE_C, TryPathIndex) == 0x000C38, "Member 'ACUBE_C::TryPathIndex' has a wrong offset!");
static_assert(offsetof(ACUBE_C, CubeLoopFX) == 0x000C40, "Member 'ACUBE_C::CubeLoopFX' has a wrong offset!");
static_assert(offsetof(ACUBE_C, ImpulseStrengthZVehicle) == 0x000C48, "Member 'ACUBE_C::ImpulseStrengthZVehicle' has a wrong offset!");
static_assert(offsetof(ACUBE_C, SpawnCubeTimer) == 0x000C50, "Member 'ACUBE_C::SpawnCubeTimer' has a wrong offset!");
static_assert(offsetof(ACUBE_C, CubeLeftPosition) == 0x000C58, "Member 'ACUBE_C::CubeLeftPosition' has a wrong offset!");
static_assert(offsetof(ACUBE_C, RollForwardTransform) == 0x000C70, "Member 'ACUBE_C::RollForwardTransform' has a wrong offset!");
static_assert(offsetof(ACUBE_C, TempSteps) == 0x000CA0, "Member 'ACUBE_C::TempSteps' has a wrong offset!");
static_assert(offsetof(ACUBE_C, LastLaunchedPlayer) == 0x000CB0, "Member 'ACUBE_C::LastLaunchedPlayer' has a wrong offset!");
static_assert(offsetof(ACUBE_C, CorrectiveTransforms) == 0x000CC0, "Member 'ACUBE_C::CorrectiveTransforms' has a wrong offset!");
static_assert(offsetof(ACUBE_C, GravVolumesSpawned) == 0x000D10, "Member 'ACUBE_C::GravVolumesSpawned' has a wrong offset!");
static_assert(offsetof(ACUBE_C, ImpulseStrengthPlayer) == 0x000D18, "Member 'ACUBE_C::ImpulseStrengthPlayer' has a wrong offset!");
static_assert(offsetof(ACUBE_C, ImpulseStrengthVehicle) == 0x000D38, "Member 'ACUBE_C::ImpulseStrengthVehicle' has a wrong offset!");
static_assert(offsetof(ACUBE_C, ImpulseVehicleZ) == 0x000D58, "Member 'ACUBE_C::ImpulseVehicleZ' has a wrong offset!");
static_assert(offsetof(ACUBE_C, ImpulsePlayerZ) == 0x000D78, "Member 'ACUBE_C::ImpulsePlayerZ' has a wrong offset!");
static_assert(offsetof(ACUBE_C, ImpulsePlayerZWalking) == 0x000D98, "Member 'ACUBE_C::ImpulsePlayerZWalking' has a wrong offset!");
static_assert(offsetof(ACUBE_C, RetriggerCleanupTimer) == 0x000DB8, "Member 'ACUBE_C::RetriggerCleanupTimer' has a wrong offset!");
static_assert(offsetof(ACUBE_C, CubeDestBlueprint) == 0x000DC0, "Member 'ACUBE_C::CubeDestBlueprint' has a wrong offset!");
static_assert(offsetof(ACUBE_C, IsAtLake) == 0x000DC8, "Member 'ACUBE_C::IsAtLake' has a wrong offset!");
static_assert(offsetof(ACUBE_C, SkyStartingIntensity) == 0x000DCC, "Member 'ACUBE_C::SkyStartingIntensity' has a wrong offset!");
static_assert(offsetof(ACUBE_C, LerpFrom) == 0x000DD0, "Member 'ACUBE_C::LerpFrom' has a wrong offset!");
static_assert(offsetof(ACUBE_C, LerpTo) == 0x000E00, "Member 'ACUBE_C::LerpTo' has a wrong offset!");
static_assert(offsetof(ACUBE_C, AudioRollLandLake) == 0x000E30, "Member 'ACUBE_C::AudioRollLandLake' has a wrong offset!");
static_assert(offsetof(ACUBE_C, TiltedHit) == 0x000E38, "Member 'ACUBE_C::TiltedHit' has a wrong offset!");
static_assert(offsetof(ACUBE_C, DestTurnedOn) == 0x000E39, "Member 'ACUBE_C::DestTurnedOn' has a wrong offset!");
static_assert(offsetof(ACUBE_C, AreaActors) == 0x000E40, "Member 'ACUBE_C::AreaActors' has a wrong offset!");
static_assert(offsetof(ACUBE_C, LowGravSphereArray) == 0x000E50, "Member 'ACUBE_C::LowGravSphereArray' has a wrong offset!");
static_assert(offsetof(ACUBE_C, DistantLakeGlow) == 0x000E60, "Member 'ACUBE_C::DistantLakeGlow' has a wrong offset!");

}

