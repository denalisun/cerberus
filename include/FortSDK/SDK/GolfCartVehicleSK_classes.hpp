#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GolfCartVehicleSK

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CommonInput_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GolfCartVehicleSK.GolfCartVehicleSK_C
// 0x0418 (0x1228 - 0x0E10)
class AGolfCartVehicleSK_C final : public AFortAthenaGoatVehicle
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0E10(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        GolfCart_Horn_Cue;                                 // 0x0E18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortCollisionAudioComponent*           FortCollisionAudioSuspension;                      // 0x0E20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_CollisionBodies;                                // 0x0E28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          OverlapVolume;                                     // 0x0E30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioHandbrakeSkid;                                // 0x0E38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               TrailRight;                                        // 0x0E40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               TrailLeft;                                         // 0x0E48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioBoost;                                        // 0x0E50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_GolfCart_Boost_Flames_l;                         // 0x0E58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_GolfCart_Boost_Flames_r;                         // 0x0E60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_GolfCart_Vehicle_WheelSlide;                     // 0x0E68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioWind;                                         // 0x0E70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_GolfCart_Vehicle_WheelDust;                      // 0x0E78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortCollisionAudioComponent*           FortCollisionAudioImpacts;                         // 0x0E80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioScrape;                                       // 0x0E88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioInAir;                                        // 0x0E90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioSkid;                                         // 0x0E98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioBattery;                                      // 0x0EA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioMovement;                                     // 0x0EA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         BoostTimeline_Rumble_90E359754526830779FB5495ACA1A493; // 0x0EB0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostTimeline_Track1_90E359754526830779FB5495ACA1A493; // 0x0EB4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BoostTimeline__Direction_90E359754526830779FB5495ACA1A493; // 0x0EB8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EB9[0x7];                                      // 0x0EB9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BoostTimeline;                                     // 0x0EC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             OnDeathSound;                                      // 0x0EC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        PassengerPawn;                                     // 0x0ED0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         ImpulsePower;                                      // 0x0ED8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         RearVectorThreshold;                               // 0x0EF8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                ImpulseVector;                                     // 0x0F18(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F24[0x4];                                      // 0x0F24(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortPickup*>                    AttachedPickups;                                   // 0x0F28(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	class AFortPickup*                            FortPickup;                                        // 0x0F38(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         MaxPickups;                                        // 0x0F40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentPickups;                                    // 0x0F44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortWorldItemDefinition*               ObjectReference;                                   // 0x0F48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      DrivingPlayerController;                           // 0x0F50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurningAmount;                                     // 0x0F58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F5C[0x4];                                      // 0x0F5C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_RocketLauncher_Generic_Athena_C*     BoundRocket;                                       // 0x0F60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        DriverPawn;                                        // 0x0F68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CorrectiveImpulse;                                 // 0x0F70(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F7C[0x4];                                      // 0x0F7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         RumbleMultipier;                                   // 0x0F80(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AFortPlayerPawn*                        LastDriver;                                        // 0x0FA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinVelocityToLaunch;                               // 0x0FA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxLaunchVelocity;                                 // 0x0FAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchAngle;                                       // 0x0FB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FB4[0x4];                                      // 0x0FB4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawnAthena*                  LastHitPlayer;                                     // 0x0FB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchMultiplier;                                  // 0x0FC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC4[0x4];                                      // 0x0FC4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         HitMinusZImpulseMultiplier;                        // 0x0FC8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HitMinusLateralImpulseMultiplier;                  // 0x0FE8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HitMinusMaxImpulseVelocity;                        // 0x1008(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         HealthToDestroyProp;                               // 0x1028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreHitLastDriver;                               // 0x102C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PassengerIsInstigator;                             // 0x102D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_102E[0x2];                                     // 0x102E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   DoorMesh;                                          // 0x1030(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         CanLaunchPlayer;                                   // 0x1038(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class APlayerController*                      PassengerPlayerController;                         // 0x1058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LaunchCharacterExtraVelocity;                      // 0x1060(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchCharacterVelocityScalar;                     // 0x106C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        BounceOverlapPawn;                                 // 0x1070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  BounceOverlapController;                           // 0x1078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FinalBounceJumpHeight;                             // 0x1080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BounceHeight;                                      // 0x1084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_PlayerLaunched;                                 // 0x1088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   LaunchForceFeedback;                               // 0x1090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AFortPlayerPawn*>                Passengers;                                        // 0x1098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AFortPlayerPawn*>                BounceIgnoreList;                                  // 0x10A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          Debug_NoCameraShake;                               // 0x10B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10B9[0x3];                                     // 0x10B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BoostCameraOffsetLerpStart;                        // 0x10BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Boost;                                             // 0x10C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostRumbleValue;                                  // 0x10C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ResetBoostFX;                                      // 0x10C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10C9[0x3];                                     // 0x10C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DestructionAngle;                                  // 0x10CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PropDamageAmount;                                  // 0x10D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10D4[0x4];                                     // 0x10D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             OnBoostSound;                                      // 0x10D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             OnRoofBounceSound;                                 // 0x10E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ColorKickBoostScale;                               // 0x10E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BounceVector;                                      // 0x10EC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpactLocation;                                    // 0x10F8(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1104[0x4];                                     // 0x1104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ActorToDestroy;                                    // 0x1108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TrailsActive;                                      // 0x1110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1111[0x7];                                     // 0x1111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 VehicleHitActor;                                   // 0x1118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USoundBase*>                     OnBoostIncreaseSounds;                             // 0x1120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UAudioComponent*                        BoostIncreaseAudioComp;                            // 0x1130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               InWaterFX;                                         // 0x1138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UnobstructedBounceVelocity;                        // 0x1140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ObstructedBounceVelocity;                          // 0x1144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        InWaterLoop;                                       // 0x1148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EngineSoundMaxDistance;                            // 0x1150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1154[0x4];                                     // 0x1154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        HonkAudioComp;                                     // 0x1158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 GCParamsEmpty;                                     // 0x1160(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         SavedHeadlightValueForMID;                         // 0x1218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SavedDamageValueForMID;                            // 0x121C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostTimeValueForMID;                              // 0x1220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GolfCartVehicleSK(int32 EntryPoint);
	void SetHeadlightState(EFortDayPhase CurrentDayPhase, EFortDayPhase PreviousDayPhase, bool bAtCreation);
	void CanHitLastDriver();
	void StopDriverCameraShake();
	void StartDriverCameraShake();
	void StartDriverRumble();
	void StopDriverRumble();
	void OnIsSprintingChanged();
	void OnStopTick();
	void ChangeOutMaterials();
	void K2_ApplyCosmeticWrap(const class UAthenaItemWrapDefinition* LoadedWrap);
	void PawnHitByVehicle(class AFortPawn* Pawn, const struct FVector& ImpactPoint, const struct FVector& ImpactNormal, const struct FVector& LaunchVector);
	void DisableSkelmeshTickAfterBounce();
	void RemoteClientBounceEffects();
	void CheckWater();
	void OnExitedWaterVolume(const struct FVector& WaterSurfacePoint);
	void OnEnteredWaterVolume(const struct FVector& WaterSurfacePoint);
	void BoostIncrease(int32 AccumulationStepIndex);
	void Handle_Spring_Compression_Audio();
	void ReceiveBeginPlay();
	void StartBoostRumble();
	void ReverseBoostTimeline();
	void DestroyCooldown();
	void BndEvt__SkeletalMesh_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void LocalPassengerADS(bool IsADS);
	void BoostCameraReverse();
	void BoostRumbleEnd();
	void UpdateBoostRumble();
	void NoShake();
	void PowerSlideEnd();
	void PowerSlideBegin();
	void EBrakeEnd();
	void EBrakeBegin();
	void BoostEnd();
	void BoostBegin();
	void OnSpringCompression();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void Update_Damage_State(float Damage);
	void OnDamaged(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FGameplayEffectContextHandle& EffectContext, class AController* EventInstigator, class AActor* DamageCauser);
	void OnPawnExitVehicle(class AFortPlayerPawn* PlayerPawn, class FName ExitSocketName);
	void RocketSpawned();
	void OnWeaponEquipped(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon);
	void OnPawnEnterVehicle(class AFortPlayerPawn* PlayerPawn, int32 SeatIdx);
	void PedalForceFeedback();
	void DropItems();
	void AttachToCart();
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ApplyImpulse();
	void OnCollisionHitEffects(const struct FVector& HitLocation, const struct FVector& HitNormalImpulse, const struct FVector& HitFrictionImpulse, const struct FVector& HitNormal, class AActor* HitActor, EPhysicalSurface HitSurfaceType);
	void UpdateMovementCosmeticParameters();
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void ReceiveTick(float DeltaSeconds);
	void OnCompleted_A0C9C97A4DE010E2D38107B3519D371C(class FName NotifyName);
	void OnBlendOut_A0C9C97A4DE010E2D38107B3519D371C(class FName NotifyName);
	void OnInterrupted_A0C9C97A4DE010E2D38107B3519D371C(class FName NotifyName);
	void OnNotifyBegin_A0C9C97A4DE010E2D38107B3519D371C(class FName NotifyName);
	void OnNotifyEnd_A0C9C97A4DE010E2D38107B3519D371C(class FName NotifyName);
	void BoostTimeline__UpdateFunc();
	void BoostTimeline__FinishedFunc();
	void UserConstructionScript();
	void OnRep_ImpulseVector();
	void AttachWeaponToCart(int32 Selection);
	void PlayHapticsOnHit(float HitMagnitude);
	void OnRep_CorrectiveImpulse();
	TArray<class FName> GetVehicleSeatActionNames(class AFortPlayerPawn* PlayerPawn, const ECommonInputType OverrideInputType);
	TArray<class FText> GetVehicleSeatLabels(class AFortPlayerPawn* PlayerPawn, const ECommonInputType OverrideInputType);
	TArray<class FText> GetVehicleSeatActionLabels(class AFortPlayerPawn* PlayerPawn, const ECommonInputType OverrideInputType);
	void OnRep_ImpactLocation();
	void DestroyOrDamageBuildingPiece(class ABuildingActor* BuildingActor, bool CheckForHealth, class UClass* GameplayEffectClass, float DestroyThreshold);
	void SendHeadlightValueToMaterials(const float ParameterValue);
	void SendDamageValueToMaterials(const float ParameterValue);
	void SendBoostTimeToMaterials(const float ParameterValue);

	class FName GetVehicleSeatPrimaryAction(class AFortPlayerPawn* FortPlayerPawn) const;
	void GetIconPlacement(class AActor* SelfActor, struct FVector* OutLocation, struct FVector* OutExtents) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GolfCartVehicleSK_C">();
	}
	static class AGolfCartVehicleSK_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGolfCartVehicleSK_C>();
	}
};
static_assert(alignof(AGolfCartVehicleSK_C) == 0x000008, "Wrong alignment on AGolfCartVehicleSK_C");
static_assert(sizeof(AGolfCartVehicleSK_C) == 0x001228, "Wrong size on AGolfCartVehicleSK_C");
static_assert(offsetof(AGolfCartVehicleSK_C, UberGraphFrame) == 0x000E10, "Member 'AGolfCartVehicleSK_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, GolfCart_Horn_Cue) == 0x000E18, "Member 'AGolfCartVehicleSK_C::GolfCart_Horn_Cue' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, FortCollisionAudioSuspension) == 0x000E20, "Member 'AGolfCartVehicleSK_C::FortCollisionAudioSuspension' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, SM_CollisionBodies) == 0x000E28, "Member 'AGolfCartVehicleSK_C::SM_CollisionBodies' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, OverlapVolume) == 0x000E30, "Member 'AGolfCartVehicleSK_C::OverlapVolume' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, AudioHandbrakeSkid) == 0x000E38, "Member 'AGolfCartVehicleSK_C::AudioHandbrakeSkid' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, TrailRight) == 0x000E40, "Member 'AGolfCartVehicleSK_C::TrailRight' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, TrailLeft) == 0x000E48, "Member 'AGolfCartVehicleSK_C::TrailLeft' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, AudioBoost) == 0x000E50, "Member 'AGolfCartVehicleSK_C::AudioBoost' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, P_GolfCart_Boost_Flames_l) == 0x000E58, "Member 'AGolfCartVehicleSK_C::P_GolfCart_Boost_Flames_l' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, P_GolfCart_Boost_Flames_r) == 0x000E60, "Member 'AGolfCartVehicleSK_C::P_GolfCart_Boost_Flames_r' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, P_GolfCart_Vehicle_WheelSlide) == 0x000E68, "Member 'AGolfCartVehicleSK_C::P_GolfCart_Vehicle_WheelSlide' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, AudioWind) == 0x000E70, "Member 'AGolfCartVehicleSK_C::AudioWind' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, P_GolfCart_Vehicle_WheelDust) == 0x000E78, "Member 'AGolfCartVehicleSK_C::P_GolfCart_Vehicle_WheelDust' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, FortCollisionAudioImpacts) == 0x000E80, "Member 'AGolfCartVehicleSK_C::FortCollisionAudioImpacts' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, AudioScrape) == 0x000E88, "Member 'AGolfCartVehicleSK_C::AudioScrape' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, AudioInAir) == 0x000E90, "Member 'AGolfCartVehicleSK_C::AudioInAir' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, AudioSkid) == 0x000E98, "Member 'AGolfCartVehicleSK_C::AudioSkid' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, AudioBattery) == 0x000EA0, "Member 'AGolfCartVehicleSK_C::AudioBattery' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, AudioMovement) == 0x000EA8, "Member 'AGolfCartVehicleSK_C::AudioMovement' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, BoostTimeline_Rumble_90E359754526830779FB5495ACA1A493) == 0x000EB0, "Member 'AGolfCartVehicleSK_C::BoostTimeline_Rumble_90E359754526830779FB5495ACA1A493' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, BoostTimeline_Track1_90E359754526830779FB5495ACA1A493) == 0x000EB4, "Member 'AGolfCartVehicleSK_C::BoostTimeline_Track1_90E359754526830779FB5495ACA1A493' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, BoostTimeline__Direction_90E359754526830779FB5495ACA1A493) == 0x000EB8, "Member 'AGolfCartVehicleSK_C::BoostTimeline__Direction_90E359754526830779FB5495ACA1A493' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, BoostTimeline) == 0x000EC0, "Member 'AGolfCartVehicleSK_C::BoostTimeline' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, OnDeathSound) == 0x000EC8, "Member 'AGolfCartVehicleSK_C::OnDeathSound' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, PassengerPawn) == 0x000ED0, "Member 'AGolfCartVehicleSK_C::PassengerPawn' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, ImpulsePower) == 0x000ED8, "Member 'AGolfCartVehicleSK_C::ImpulsePower' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, RearVectorThreshold) == 0x000EF8, "Member 'AGolfCartVehicleSK_C::RearVectorThreshold' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, ImpulseVector) == 0x000F18, "Member 'AGolfCartVehicleSK_C::ImpulseVector' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, AttachedPickups) == 0x000F28, "Member 'AGolfCartVehicleSK_C::AttachedPickups' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, FortPickup) == 0x000F38, "Member 'AGolfCartVehicleSK_C::FortPickup' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, MaxPickups) == 0x000F40, "Member 'AGolfCartVehicleSK_C::MaxPickups' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, CurrentPickups) == 0x000F44, "Member 'AGolfCartVehicleSK_C::CurrentPickups' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, ObjectReference) == 0x000F48, "Member 'AGolfCartVehicleSK_C::ObjectReference' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, DrivingPlayerController) == 0x000F50, "Member 'AGolfCartVehicleSK_C::DrivingPlayerController' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, TurningAmount) == 0x000F58, "Member 'AGolfCartVehicleSK_C::TurningAmount' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, BoundRocket) == 0x000F60, "Member 'AGolfCartVehicleSK_C::BoundRocket' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, DriverPawn) == 0x000F68, "Member 'AGolfCartVehicleSK_C::DriverPawn' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, CorrectiveImpulse) == 0x000F70, "Member 'AGolfCartVehicleSK_C::CorrectiveImpulse' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, RumbleMultipier) == 0x000F80, "Member 'AGolfCartVehicleSK_C::RumbleMultipier' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, LastDriver) == 0x000FA0, "Member 'AGolfCartVehicleSK_C::LastDriver' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, MinVelocityToLaunch) == 0x000FA8, "Member 'AGolfCartVehicleSK_C::MinVelocityToLaunch' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, MaxLaunchVelocity) == 0x000FAC, "Member 'AGolfCartVehicleSK_C::MaxLaunchVelocity' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, LaunchAngle) == 0x000FB0, "Member 'AGolfCartVehicleSK_C::LaunchAngle' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, LastHitPlayer) == 0x000FB8, "Member 'AGolfCartVehicleSK_C::LastHitPlayer' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, LaunchMultiplier) == 0x000FC0, "Member 'AGolfCartVehicleSK_C::LaunchMultiplier' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, HitMinusZImpulseMultiplier) == 0x000FC8, "Member 'AGolfCartVehicleSK_C::HitMinusZImpulseMultiplier' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, HitMinusLateralImpulseMultiplier) == 0x000FE8, "Member 'AGolfCartVehicleSK_C::HitMinusLateralImpulseMultiplier' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, HitMinusMaxImpulseVelocity) == 0x001008, "Member 'AGolfCartVehicleSK_C::HitMinusMaxImpulseVelocity' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, HealthToDestroyProp) == 0x001028, "Member 'AGolfCartVehicleSK_C::HealthToDestroyProp' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, IgnoreHitLastDriver) == 0x00102C, "Member 'AGolfCartVehicleSK_C::IgnoreHitLastDriver' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, PassengerIsInstigator) == 0x00102D, "Member 'AGolfCartVehicleSK_C::PassengerIsInstigator' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, DoorMesh) == 0x001030, "Member 'AGolfCartVehicleSK_C::DoorMesh' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, CanLaunchPlayer) == 0x001038, "Member 'AGolfCartVehicleSK_C::CanLaunchPlayer' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, PassengerPlayerController) == 0x001058, "Member 'AGolfCartVehicleSK_C::PassengerPlayerController' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, LaunchCharacterExtraVelocity) == 0x001060, "Member 'AGolfCartVehicleSK_C::LaunchCharacterExtraVelocity' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, LaunchCharacterVelocityScalar) == 0x00106C, "Member 'AGolfCartVehicleSK_C::LaunchCharacterVelocityScalar' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, BounceOverlapPawn) == 0x001070, "Member 'AGolfCartVehicleSK_C::BounceOverlapPawn' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, BounceOverlapController) == 0x001078, "Member 'AGolfCartVehicleSK_C::BounceOverlapController' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, FinalBounceJumpHeight) == 0x001080, "Member 'AGolfCartVehicleSK_C::FinalBounceJumpHeight' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, BounceHeight) == 0x001084, "Member 'AGolfCartVehicleSK_C::BounceHeight' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, GE_PlayerLaunched) == 0x001088, "Member 'AGolfCartVehicleSK_C::GE_PlayerLaunched' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, LaunchForceFeedback) == 0x001090, "Member 'AGolfCartVehicleSK_C::LaunchForceFeedback' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, Passengers) == 0x001098, "Member 'AGolfCartVehicleSK_C::Passengers' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, BounceIgnoreList) == 0x0010A8, "Member 'AGolfCartVehicleSK_C::BounceIgnoreList' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, Debug_NoCameraShake) == 0x0010B8, "Member 'AGolfCartVehicleSK_C::Debug_NoCameraShake' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, BoostCameraOffsetLerpStart) == 0x0010BC, "Member 'AGolfCartVehicleSK_C::BoostCameraOffsetLerpStart' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, Boost) == 0x0010C0, "Member 'AGolfCartVehicleSK_C::Boost' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, BoostRumbleValue) == 0x0010C4, "Member 'AGolfCartVehicleSK_C::BoostRumbleValue' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, ResetBoostFX) == 0x0010C8, "Member 'AGolfCartVehicleSK_C::ResetBoostFX' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, DestructionAngle) == 0x0010CC, "Member 'AGolfCartVehicleSK_C::DestructionAngle' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, PropDamageAmount) == 0x0010D0, "Member 'AGolfCartVehicleSK_C::PropDamageAmount' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, OnBoostSound) == 0x0010D8, "Member 'AGolfCartVehicleSK_C::OnBoostSound' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, OnRoofBounceSound) == 0x0010E0, "Member 'AGolfCartVehicleSK_C::OnRoofBounceSound' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, ColorKickBoostScale) == 0x0010E8, "Member 'AGolfCartVehicleSK_C::ColorKickBoostScale' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, BounceVector) == 0x0010EC, "Member 'AGolfCartVehicleSK_C::BounceVector' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, ImpactLocation) == 0x0010F8, "Member 'AGolfCartVehicleSK_C::ImpactLocation' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, ActorToDestroy) == 0x001108, "Member 'AGolfCartVehicleSK_C::ActorToDestroy' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, TrailsActive) == 0x001110, "Member 'AGolfCartVehicleSK_C::TrailsActive' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, VehicleHitActor) == 0x001118, "Member 'AGolfCartVehicleSK_C::VehicleHitActor' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, OnBoostIncreaseSounds) == 0x001120, "Member 'AGolfCartVehicleSK_C::OnBoostIncreaseSounds' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, BoostIncreaseAudioComp) == 0x001130, "Member 'AGolfCartVehicleSK_C::BoostIncreaseAudioComp' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, InWaterFX) == 0x001138, "Member 'AGolfCartVehicleSK_C::InWaterFX' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, UnobstructedBounceVelocity) == 0x001140, "Member 'AGolfCartVehicleSK_C::UnobstructedBounceVelocity' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, ObstructedBounceVelocity) == 0x001144, "Member 'AGolfCartVehicleSK_C::ObstructedBounceVelocity' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, InWaterLoop) == 0x001148, "Member 'AGolfCartVehicleSK_C::InWaterLoop' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, EngineSoundMaxDistance) == 0x001150, "Member 'AGolfCartVehicleSK_C::EngineSoundMaxDistance' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, HonkAudioComp) == 0x001158, "Member 'AGolfCartVehicleSK_C::HonkAudioComp' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, GCParamsEmpty) == 0x001160, "Member 'AGolfCartVehicleSK_C::GCParamsEmpty' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, SavedHeadlightValueForMID) == 0x001218, "Member 'AGolfCartVehicleSK_C::SavedHeadlightValueForMID' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, SavedDamageValueForMID) == 0x00121C, "Member 'AGolfCartVehicleSK_C::SavedDamageValueForMID' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, BoostTimeValueForMID) == 0x001220, "Member 'AGolfCartVehicleSK_C::BoostTimeValueForMID' has a wrong offset!");

}

