#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CubeOverlapActor

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function CubeOverlapActor.CubeOverlapActor_C.ExecuteUbergraph_CubeOverlapActor
// 0x06F8 (0x06F8 - 0x0000)
struct CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        K2Node_CustomEvent_InstigatingPlayer;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0030(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue1;           // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetClosestActorFromArray_ReturnValue;     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_GCTarget;                       // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Location2;                      // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Normal2;                        // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X1;                           // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y1;                           // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z1;                           // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector_NetQuantizeNormal              K2Node_MakeStruct_Vector_NetQuantizeNormal;        // 0x0088(0x000C)(NoDestructor)
	struct FVector_NetQuantize10                  K2Node_MakeStruct_Vector_NetQuantize10;            // 0x0094(0x000C)(NoDestructor)
	class ACUBE_C*                                K2Node_DynamicCast_AsCUBE;                         // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 K2Node_MakeStruct_GameplayCueParameters;           // 0x00C0(0x00B8)(ContainsInstancedReference)
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACUBE_C*                                K2Node_DynamicCast_AsCUBE1;                        // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue;           // 0x0198(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue2;                    // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACUBE_C*                                K2Node_DynamicCast_AsCUBE2;                        // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B1[0x3];                                      // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x01B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue;    // 0x01C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerPawn_Athena_C*                   K2Node_DynamicCast_AsPlayer_Pawn_Athena;           // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortAthenaVehicle*                     CallFunc_GetVehicle_ReturnValue;                   // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x01E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x01EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortAthenaVehicle*                     CallFunc_GetVehicle_ReturnValue1;                  // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue1;         // 0x0200(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInVehicle_ReturnValue;                  // 0x020C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_20D[0x3];                                      // 0x020D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue3;                    // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACUBE_C*                                K2Node_DynamicCast_AsCUBE3;                        // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess4;                      // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_221[0x3];                                      // 0x0221(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_Location1;                      // 0x0224(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Normal1;                        // 0x0230(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_Target;                         // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X2;                           // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y2;                           // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z2;                           // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue1;     // 0x0254(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector_NetQuantizeNormal              K2Node_MakeStruct_Vector_NetQuantizeNormal1;       // 0x0260(0x000C)(NoDestructor)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x026C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X3;                           // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y3;                           // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z3;                           // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector_NetQuantize10                  K2Node_MakeStruct_Vector_NetQuantize101;           // 0x0284(0x000C)(NoDestructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue4;                    // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0298(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent1;   // 0x02A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor1;            // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp1;             // 0x02B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex1;        // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x02C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C5[0x3];                                      // 0x02C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x02C8(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0350(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0360(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0368(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CallFunc_ApplyGlobalEnvironmentGameplayEffectToActor_ReturnValue; // 0x036C(0x0008)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue1;   // 0x0378(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue1;        // 0x0380(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue1;                      // 0x038C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketClosestToTarget_LookAtDirection; // 0x0398(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketClosestToTarget_SocketLocation;  // 0x03A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue1;       // 0x03B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue2;                      // 0x03BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue2;        // 0x03C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue2;         // 0x03D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x03E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x03EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x03F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue3;        // 0x03FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0408(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_409[0x7];                                      // 0x0409(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue5;                    // 0x0410(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0418(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x041C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue2;           // 0x0428(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_429[0x3];                                      // 0x0429(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue2;       // 0x042C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x0438(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x04C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x04C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x04C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C3[0x1];                                      // 0x04C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x04C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x04C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x04CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x04D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x04E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x04F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4FC[0x4];                                      // 0x04FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0500(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0508(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0510(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0518(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0520(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0524(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0528(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0534(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABuildingActor*                         K2Node_DynamicCast_AsBuilding_Actor;               // 0x0540(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess5;                      // 0x0548(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_549[0x7];                                      // 0x0549(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortAthenaVehicle*                     K2Node_DynamicCast_AsFort_Athena_Vehicle;          // 0x0550(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess6;                      // 0x0558(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_559[0x7];                                      // 0x0559(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        K2Node_DynamicCast_AsFort_Player_Pawn;             // 0x0560(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess7;                      // 0x0568(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0569(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_56A[0x6];                                      // 0x056A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0570(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue2;   // 0x0578(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToTarget_ReturnValue; // 0x0580(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 K2Node_MakeStruct_GameplayCueParameters1;          // 0x0588(0x00B8)(ContainsInstancedReference)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x0640(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_641[0x7];                                      // 0x0641(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue6;                    // 0x0648(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0650(0x0008)(NoDestructor, HasGetValueTypeHash)
	class ACUBE_C*                                K2Node_DynamicCast_AsCUBE4;                        // 0x0658(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess8;                      // 0x0660(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_ReturnValue1;                   // 0x0661(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_662[0x6];                                      // 0x0662(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_ByteToString_ReturnValue;            // 0x0668(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0678(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortAthenaVehicle*                     K2Node_CustomEvent_Vehicle;                        // 0x0680(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Normal;                         // 0x0688(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Location;                       // 0x0694(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x06A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue7;                    // 0x06A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue1;          // 0x06B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACUBE_C*                                K2Node_DynamicCast_AsCUBE5;                        // 0x06B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess9;                      // 0x06C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C1[0x7];                                      // 0x06C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors1;  // 0x06C8(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x06D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6DC[0x4];                                      // 0x06DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x06E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x06E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E9[0x7];                                      // 0x06E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue3;   // 0x06F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor) == 0x000008, "Wrong alignment on CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor");
static_assert(sizeof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor) == 0x0006F8, "Wrong size on CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, EntryPoint) == 0x000000, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::EntryPoint' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_IsDedicatedServer_ReturnValue) == 0x000014, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, Temp_int_Array_Index_Variable) == 0x000020, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_CustomEvent_InstigatingPlayer) == 0x000028, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_CustomEvent_InstigatingPlayer' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000030, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_IsDedicatedServer_ReturnValue1) == 0x000041, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_IsDedicatedServer_ReturnValue1' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_GetClosestActorFromArray_ReturnValue) == 0x000048, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_GetClosestActorFromArray_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_CustomEvent_GCTarget) == 0x000050, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_CustomEvent_GCTarget' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_CustomEvent_Location2) == 0x000058, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_CustomEvent_Location2' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_CustomEvent_Normal2) == 0x000064, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_CustomEvent_Normal2' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BreakVector_X) == 0x000070, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BreakVector_Y) == 0x000074, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BreakVector_Z) == 0x000078, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BreakVector_X1) == 0x00007C, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BreakVector_X1' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BreakVector_Y1) == 0x000080, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BreakVector_Y1' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BreakVector_Z1) == 0x000084, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BreakVector_Z1' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_MakeStruct_Vector_NetQuantizeNormal) == 0x000088, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_MakeStruct_Vector_NetQuantizeNormal' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_MakeStruct_Vector_NetQuantize10) == 0x000094, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_MakeStruct_Vector_NetQuantize10' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_DynamicCast_AsCUBE) == 0x0000A0, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_DynamicCast_AsCUBE' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_DynamicCast_bSuccess) == 0x0000A8, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_GetOwner_ReturnValue) == 0x0000B0, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x0000B8, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_MakeStruct_GameplayCueParameters) == 0x0000C0, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_MakeStruct_GameplayCueParameters' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_GetOwner_ReturnValue1) == 0x000178, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_DynamicCast_AsCUBE1) == 0x000180, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_DynamicCast_AsCUBE1' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_DynamicCast_bSuccess1) == 0x000188, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00018C, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_SpawnSoundAttached_ReturnValue) == 0x000198, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_SpawnSoundAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_GetOwner_ReturnValue2) == 0x0001A0, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_GetOwner_ReturnValue2' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_DynamicCast_AsCUBE2) == 0x0001A8, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_DynamicCast_AsCUBE2' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_DynamicCast_bSuccess2) == 0x0001B0, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0001B4, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_GetAbilitySystemComponent_ReturnValue) == 0x0001C0, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_GetAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_DynamicCast_AsPlayer_Pawn_Athena) == 0x0001C8, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_DynamicCast_AsPlayer_Pawn_Athena' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_DynamicCast_bSuccess3) == 0x0001D0, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_GetVehicle_ReturnValue) == 0x0001D8, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_GetVehicle_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_Normal_ReturnValue) == 0x0001E0, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0001EC, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_GetVehicle_ReturnValue1) == 0x0001F8, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_GetVehicle_ReturnValue1' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_K2_GetActorLocation_ReturnValue1) == 0x000200, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_K2_GetActorLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_IsInVehicle_ReturnValue) == 0x00020C, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_IsInVehicle_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_GetOwner_ReturnValue3) == 0x000210, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_GetOwner_ReturnValue3' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_DynamicCast_AsCUBE3) == 0x000218, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_DynamicCast_AsCUBE3' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_DynamicCast_bSuccess4) == 0x000220, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_DynamicCast_bSuccess4' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_CustomEvent_Location1) == 0x000224, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_CustomEvent_Location1' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_CustomEvent_Normal1) == 0x000230, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_CustomEvent_Normal1' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_CustomEvent_Target) == 0x000240, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_CustomEvent_Target' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BreakVector_X2) == 0x000248, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BreakVector_X2' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BreakVector_Y2) == 0x00024C, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BreakVector_Y2' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BreakVector_Z2) == 0x000250, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BreakVector_Z2' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_K2_GetComponentLocation_ReturnValue1) == 0x000254, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_K2_GetComponentLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_MakeStruct_Vector_NetQuantizeNormal1) == 0x000260, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_MakeStruct_Vector_NetQuantizeNormal1' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00026C, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BreakVector_X3) == 0x000278, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BreakVector_X3' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BreakVector_Y3) == 0x00027C, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BreakVector_Y3' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BreakVector_Z3) == 0x000280, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BreakVector_Z3' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_MakeStruct_Vector_NetQuantize101) == 0x000284, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_MakeStruct_Vector_NetQuantize101' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_GetOwner_ReturnValue4) == 0x000290, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_GetOwner_ReturnValue4' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_MakeArray_Array) == 0x000298, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_ComponentBoundEvent_OverlappedComponent1) == 0x0002A8, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_ComponentBoundEvent_OverlappedComponent1' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_ComponentBoundEvent_OtherActor1) == 0x0002B0, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_ComponentBoundEvent_OtherActor1' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_ComponentBoundEvent_OtherComp1) == 0x0002B8, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_ComponentBoundEvent_OtherComp1' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_ComponentBoundEvent_OtherBodyIndex1) == 0x0002C0, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_ComponentBoundEvent_OtherBodyIndex1' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_ComponentBoundEvent_bFromSweep) == 0x0002C4, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_ComponentBoundEvent_SweepResult) == 0x0002C8, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000350, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_ComponentBoundEvent_OtherActor) == 0x000358, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_ComponentBoundEvent_OtherComp) == 0x000360, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000368, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_ApplyGlobalEnvironmentGameplayEffectToActor_ReturnValue) == 0x00036C, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_ApplyGlobalEnvironmentGameplayEffectToActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_GetAbilitySystemComponent_ReturnValue1) == 0x000378, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_GetAbilitySystemComponent_ReturnValue1' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_Multiply_VectorFloat_ReturnValue1) == 0x000380, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_Multiply_VectorFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_Normal_ReturnValue1) == 0x00038C, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_Normal_ReturnValue1' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_GetSocketClosestToTarget_LookAtDirection) == 0x000398, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_GetSocketClosestToTarget_LookAtDirection' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_GetSocketClosestToTarget_SocketLocation) == 0x0003A4, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_GetSocketClosestToTarget_SocketLocation' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_Subtract_VectorVector_ReturnValue1) == 0x0003B0, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_Subtract_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_Normal_ReturnValue2) == 0x0003BC, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_Normal_ReturnValue2' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_Multiply_VectorFloat_ReturnValue2) == 0x0003C8, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_Multiply_VectorFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_K2_GetActorLocation_ReturnValue2) == 0x0003D4, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_K2_GetActorLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_Add_VectorVector_ReturnValue) == 0x0003E0, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_VLerp_ReturnValue) == 0x0003EC, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_Array_Length_ReturnValue) == 0x0003F8, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_Multiply_VectorFloat_ReturnValue3) == 0x0003FC, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_Multiply_VectorFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_Greater_IntInt_ReturnValue) == 0x000408, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_GetOwner_ReturnValue5) == 0x000410, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_GetOwner_ReturnValue5' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_SelectFloat_ReturnValue) == 0x000418, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_MakeVector_ReturnValue) == 0x00041C, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_IsDedicatedServer_ReturnValue2) == 0x000428, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_IsDedicatedServer_ReturnValue2' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_Subtract_VectorVector_ReturnValue2) == 0x00042C, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_Subtract_VectorVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_SphereTraceSingle_OutHit) == 0x000438, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_SphereTraceSingle_ReturnValue) == 0x0004C0, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BreakHitResult_bBlockingHit) == 0x0004C1, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BreakHitResult_bInitialOverlap) == 0x0004C2, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BreakHitResult_Time) == 0x0004C4, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BreakHitResult_Distance) == 0x0004C8, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BreakHitResult_Location) == 0x0004CC, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BreakHitResult_ImpactPoint) == 0x0004D8, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BreakHitResult_Normal) == 0x0004E4, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BreakHitResult_ImpactNormal) == 0x0004F0, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BreakHitResult_PhysMat) == 0x000500, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BreakHitResult_HitActor) == 0x000508, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BreakHitResult_HitComponent) == 0x000510, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BreakHitResult_HitBoneName) == 0x000518, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BreakHitResult_HitItem) == 0x000520, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BreakHitResult_FaceIndex) == 0x000524, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BreakHitResult_TraceStart) == 0x000528, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BreakHitResult_TraceEnd) == 0x000534, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_DynamicCast_AsBuilding_Actor) == 0x000540, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_DynamicCast_AsBuilding_Actor' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_DynamicCast_bSuccess5) == 0x000548, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_DynamicCast_bSuccess5' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_DynamicCast_AsFort_Athena_Vehicle) == 0x000550, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_DynamicCast_AsFort_Athena_Vehicle' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_DynamicCast_bSuccess6) == 0x000558, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_DynamicCast_bSuccess6' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_DynamicCast_AsFort_Player_Pawn) == 0x000560, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_DynamicCast_AsFort_Player_Pawn' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_DynamicCast_bSuccess7) == 0x000568, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_DynamicCast_bSuccess7' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BooleanOR_ReturnValue) == 0x000569, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_GetController_ReturnValue) == 0x000570, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_GetAbilitySystemComponent_ReturnValue2) == 0x000578, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_GetAbilitySystemComponent_ReturnValue2' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_BP_ApplyGameplayEffectToTarget_ReturnValue) == 0x000580, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_BP_ApplyGameplayEffectToTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_MakeStruct_GameplayCueParameters1) == 0x000588, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_MakeStruct_GameplayCueParameters1' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_IsPlaying_ReturnValue) == 0x000640, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_GetOwner_ReturnValue6) == 0x000648, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_GetOwner_ReturnValue6' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000650, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_DynamicCast_AsCUBE4) == 0x000658, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_DynamicCast_AsCUBE4' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_DynamicCast_bSuccess8) == 0x000660, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_DynamicCast_bSuccess8' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_IsPlaying_ReturnValue1) == 0x000661, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_IsPlaying_ReturnValue1' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_Conv_ByteToString_ReturnValue) == 0x000668, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_Conv_ByteToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_Conv_StringToName_ReturnValue) == 0x000678, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_CustomEvent_Vehicle) == 0x000680, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_CustomEvent_Vehicle' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_CustomEvent_Normal) == 0x000688, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_CustomEvent_Normal' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_CustomEvent_Location) == 0x000694, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_CustomEvent_Location' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x0006A0, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_GetOwner_ReturnValue7) == 0x0006A8, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_GetOwner_ReturnValue7' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_SpawnSoundAttached_ReturnValue1) == 0x0006B0, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_SpawnSoundAttached_ReturnValue1' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_DynamicCast_AsCUBE5) == 0x0006B8, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_DynamicCast_AsCUBE5' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, K2Node_DynamicCast_bSuccess9) == 0x0006C0, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::K2Node_DynamicCast_bSuccess9' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_GetOverlappingActors_OverlappingActors1) == 0x0006C8, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_GetOverlappingActors_OverlappingActors1' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_Array_Length_ReturnValue1) == 0x0006D8, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_Array_Get_Item) == 0x0006E0, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_Less_IntInt_ReturnValue) == 0x0006E8, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor, CallFunc_GetAbilitySystemComponent_ReturnValue3) == 0x0006F0, "Member 'CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor::CallFunc_GetAbilitySystemComponent_ReturnValue3' has a wrong offset!");

// Function CubeOverlapActor.CubeOverlapActor_C.ZapVehicle
// 0x0020 (0x0020 - 0x0000)
struct CubeOverlapActor_C_ZapVehicle final
{
public:
	class AFortAthenaVehicle*                     Vehicle;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Normal;                                            // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CubeOverlapActor_C_ZapVehicle) == 0x000008, "Wrong alignment on CubeOverlapActor_C_ZapVehicle");
static_assert(sizeof(CubeOverlapActor_C_ZapVehicle) == 0x000020, "Wrong size on CubeOverlapActor_C_ZapVehicle");
static_assert(offsetof(CubeOverlapActor_C_ZapVehicle, Vehicle) == 0x000000, "Member 'CubeOverlapActor_C_ZapVehicle::Vehicle' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ZapVehicle, Normal) == 0x000008, "Member 'CubeOverlapActor_C_ZapVehicle::Normal' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_ZapVehicle, Location) == 0x000014, "Member 'CubeOverlapActor_C_ZapVehicle::Location' has a wrong offset!");

// Function CubeOverlapActor.CubeOverlapActor_C.BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function CubeOverlapActor.CubeOverlapActor_C.BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function CubeOverlapActor.CubeOverlapActor_C.CubeBounceFX
// 0x0020 (0x0020 - 0x0000)
struct CubeOverlapActor_C_CubeBounceFX final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Normal;                                            // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Target;                                            // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CubeOverlapActor_C_CubeBounceFX) == 0x000008, "Wrong alignment on CubeOverlapActor_C_CubeBounceFX");
static_assert(sizeof(CubeOverlapActor_C_CubeBounceFX) == 0x000020, "Wrong size on CubeOverlapActor_C_CubeBounceFX");
static_assert(offsetof(CubeOverlapActor_C_CubeBounceFX, Location) == 0x000000, "Member 'CubeOverlapActor_C_CubeBounceFX::Location' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_CubeBounceFX, Normal) == 0x00000C, "Member 'CubeOverlapActor_C_CubeBounceFX::Normal' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_CubeBounceFX, Target) == 0x000018, "Member 'CubeOverlapActor_C_CubeBounceFX::Target' has a wrong offset!");

// Function CubeOverlapActor.CubeOverlapActor_C.SpawnGC
// 0x0020 (0x0020 - 0x0000)
struct CubeOverlapActor_C_SpawnGC final
{
public:
	class AActor*                                 GCTarget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Normal;                                            // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CubeOverlapActor_C_SpawnGC) == 0x000008, "Wrong alignment on CubeOverlapActor_C_SpawnGC");
static_assert(sizeof(CubeOverlapActor_C_SpawnGC) == 0x000020, "Wrong size on CubeOverlapActor_C_SpawnGC");
static_assert(offsetof(CubeOverlapActor_C_SpawnGC, GCTarget) == 0x000000, "Member 'CubeOverlapActor_C_SpawnGC::GCTarget' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_SpawnGC, Location) == 0x000008, "Member 'CubeOverlapActor_C_SpawnGC::Location' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_SpawnGC, Normal) == 0x000014, "Member 'CubeOverlapActor_C_SpawnGC::Normal' has a wrong offset!");

// Function CubeOverlapActor.CubeOverlapActor_C.ZapPlayer
// 0x0008 (0x0008 - 0x0000)
struct CubeOverlapActor_C_ZapPlayer final
{
public:
	class AFortPlayerPawn*                        InstigatingPlayer;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CubeOverlapActor_C_ZapPlayer) == 0x000008, "Wrong alignment on CubeOverlapActor_C_ZapPlayer");
static_assert(sizeof(CubeOverlapActor_C_ZapPlayer) == 0x000008, "Wrong size on CubeOverlapActor_C_ZapPlayer");
static_assert(offsetof(CubeOverlapActor_C_ZapPlayer, InstigatingPlayer) == 0x000000, "Member 'CubeOverlapActor_C_ZapPlayer::InstigatingPlayer' has a wrong offset!");

// Function CubeOverlapActor.CubeOverlapActor_C.UserConstructionScript
// 0x0004 (0x0004 - 0x0000)
struct CubeOverlapActor_C_UserConstructionScript final
{
public:
	float                                         CallFunc_GetValueAtLevel_ReturnValue;              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CubeOverlapActor_C_UserConstructionScript) == 0x000004, "Wrong alignment on CubeOverlapActor_C_UserConstructionScript");
static_assert(sizeof(CubeOverlapActor_C_UserConstructionScript) == 0x000004, "Wrong size on CubeOverlapActor_C_UserConstructionScript");
static_assert(offsetof(CubeOverlapActor_C_UserConstructionScript, CallFunc_GetValueAtLevel_ReturnValue) == 0x000000, "Member 'CubeOverlapActor_C_UserConstructionScript::CallFunc_GetValueAtLevel_ReturnValue' has a wrong offset!");

// Function CubeOverlapActor.CubeOverlapActor_C.GetSocketClosestToTarget
// 0x0100 (0x0100 - 0x0000)
struct CubeOverlapActor_C_GetSocketClosestToTarget final
{
public:
	class AActor*                                 TargetPlayer;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LookAtDirection;                                   // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SocketLocation;                                    // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DirectionTOPlayerTemp;                             // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ClosestSocket;                                     // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACUBE_C*                                K2Node_DynamicCast_AsCUBE;                         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_ByteToString_ReturnValue;            // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetAllSocketNames_ReturnValue;            // 0x00A8(0x0010)(ZeroConstructor, ReferenceParm)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue1;       // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x00C4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue1;           // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue2;       // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue1;                       // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x00FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CubeOverlapActor_C_GetSocketClosestToTarget) == 0x000008, "Wrong alignment on CubeOverlapActor_C_GetSocketClosestToTarget");
static_assert(sizeof(CubeOverlapActor_C_GetSocketClosestToTarget) == 0x000100, "Wrong size on CubeOverlapActor_C_GetSocketClosestToTarget");
static_assert(offsetof(CubeOverlapActor_C_GetSocketClosestToTarget, TargetPlayer) == 0x000000, "Member 'CubeOverlapActor_C_GetSocketClosestToTarget::TargetPlayer' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_GetSocketClosestToTarget, LookAtDirection) == 0x000008, "Member 'CubeOverlapActor_C_GetSocketClosestToTarget::LookAtDirection' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_GetSocketClosestToTarget, SocketLocation) == 0x000014, "Member 'CubeOverlapActor_C_GetSocketClosestToTarget::SocketLocation' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_GetSocketClosestToTarget, DirectionTOPlayerTemp) == 0x000020, "Member 'CubeOverlapActor_C_GetSocketClosestToTarget::DirectionTOPlayerTemp' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_GetSocketClosestToTarget, ClosestSocket) == 0x00002C, "Member 'CubeOverlapActor_C_GetSocketClosestToTarget::ClosestSocket' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_GetSocketClosestToTarget, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000034, "Member 'CubeOverlapActor_C_GetSocketClosestToTarget::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_GetSocketClosestToTarget, Temp_int_Array_Index_Variable) == 0x000040, "Member 'CubeOverlapActor_C_GetSocketClosestToTarget::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_GetSocketClosestToTarget, Temp_int_Loop_Counter_Variable) == 0x000044, "Member 'CubeOverlapActor_C_GetSocketClosestToTarget::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_GetSocketClosestToTarget, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'CubeOverlapActor_C_GetSocketClosestToTarget::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_GetSocketClosestToTarget, CallFunc_VSize_ReturnValue) == 0x00004C, "Member 'CubeOverlapActor_C_GetSocketClosestToTarget::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_GetSocketClosestToTarget, CallFunc_GetOwner_ReturnValue) == 0x000050, "Member 'CubeOverlapActor_C_GetSocketClosestToTarget::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_GetSocketClosestToTarget, K2Node_DynamicCast_AsCUBE) == 0x000058, "Member 'CubeOverlapActor_C_GetSocketClosestToTarget::K2Node_DynamicCast_AsCUBE' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_GetSocketClosestToTarget, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'CubeOverlapActor_C_GetSocketClosestToTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_GetSocketClosestToTarget, CallFunc_GetSocketLocation_ReturnValue) == 0x000064, "Member 'CubeOverlapActor_C_GetSocketClosestToTarget::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_GetSocketClosestToTarget, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000070, "Member 'CubeOverlapActor_C_GetSocketClosestToTarget::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_GetSocketClosestToTarget, CallFunc_Conv_ByteToString_ReturnValue) == 0x000080, "Member 'CubeOverlapActor_C_GetSocketClosestToTarget::CallFunc_Conv_ByteToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_GetSocketClosestToTarget, CallFunc_Conv_StringToName_ReturnValue) == 0x000090, "Member 'CubeOverlapActor_C_GetSocketClosestToTarget::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_GetSocketClosestToTarget, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000098, "Member 'CubeOverlapActor_C_GetSocketClosestToTarget::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_GetSocketClosestToTarget, CallFunc_GetAllSocketNames_ReturnValue) == 0x0000A8, "Member 'CubeOverlapActor_C_GetSocketClosestToTarget::CallFunc_GetAllSocketNames_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_GetSocketClosestToTarget, CallFunc_Subtract_VectorVector_ReturnValue1) == 0x0000B8, "Member 'CubeOverlapActor_C_GetSocketClosestToTarget::CallFunc_Subtract_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_GetSocketClosestToTarget, CallFunc_Array_Get_Item) == 0x0000C4, "Member 'CubeOverlapActor_C_GetSocketClosestToTarget::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_GetSocketClosestToTarget, CallFunc_Normal_ReturnValue) == 0x0000CC, "Member 'CubeOverlapActor_C_GetSocketClosestToTarget::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_GetSocketClosestToTarget, CallFunc_NotEqual_NameName_ReturnValue) == 0x0000D8, "Member 'CubeOverlapActor_C_GetSocketClosestToTarget::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_GetSocketClosestToTarget, CallFunc_GetSocketLocation_ReturnValue1) == 0x0000DC, "Member 'CubeOverlapActor_C_GetSocketClosestToTarget::CallFunc_GetSocketLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_GetSocketClosestToTarget, CallFunc_Subtract_VectorVector_ReturnValue2) == 0x0000E8, "Member 'CubeOverlapActor_C_GetSocketClosestToTarget::CallFunc_Subtract_VectorVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_GetSocketClosestToTarget, CallFunc_Array_Length_ReturnValue) == 0x0000F4, "Member 'CubeOverlapActor_C_GetSocketClosestToTarget::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_GetSocketClosestToTarget, CallFunc_VSize_ReturnValue1) == 0x0000F8, "Member 'CubeOverlapActor_C_GetSocketClosestToTarget::CallFunc_VSize_ReturnValue1' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_GetSocketClosestToTarget, CallFunc_Less_IntInt_ReturnValue) == 0x0000FC, "Member 'CubeOverlapActor_C_GetSocketClosestToTarget::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CubeOverlapActor_C_GetSocketClosestToTarget, CallFunc_Less_FloatFloat_ReturnValue) == 0x0000FD, "Member 'CubeOverlapActor_C_GetSocketClosestToTarget::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

}

