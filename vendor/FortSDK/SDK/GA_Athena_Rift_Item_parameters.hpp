#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Athena_Rift_Item

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function GA_Athena_Rift_Item.GA_Athena_Rift_Item_C.ExecuteUbergraph_GA_Athena_Rift_Item
// 0x02E0 (0x02E0 - 0x0000)
struct GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityTargetDataHandle       K2Node_CustomEvent_TargetData;                     // 0x0020(0x0020)(ConstParm)
	struct FGameplayTag                           K2Node_CustomEvent_ApplicationTag;                 // 0x0040(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable;                              // 0x0048(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayAbilityTargetDataHandle       Temp_struct_Variable1;                             // 0x0050(0x0020)()
	struct FGameplayAbilityActorInfo              CallFunc_GetActorInfo_ReturnValue;                 // 0x0070(0x0040)(ContainsInstancedReference)
	class AFortPlayerPawn*                        K2Node_DynamicCast_AsFort_Player_Pawn;             // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityTargetDataHandle       K2Node_CustomEvent_TargetData1;                    // 0x00C0(0x0020)(ConstParm)
	struct FGameplayTag                           K2Node_CustomEvent_ApplicationTag1;                // 0x00E0(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayAbilityTargetDataHandle       CallFunc_AbilityTargetDataFromActor_ReturnValue;   // 0x00E8(0x0020)()
	TArray<struct FActiveGameplayEffectHandle>    CallFunc_BP_ApplyGameplayEffectToTarget_ReturnValue; // 0x0108(0x0010)(ZeroConstructor, ReferenceParm)
	TDelegate<void(struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag)> K2Node_CreateDelegate_OutputDelegate1;             // 0x0118(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_CommitAbility_ReturnValue;             // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12A[0x6];                                      // 0x012A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAbilityTask_PlayMontageWaitTarget* CallFunc_PlayMontageInfoAndWaitForTrigger_ReturnValue; // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 K2Node_MakeStruct_GameplayCueParameters;           // 0x0138(0x00B8)(ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bWasCancelled;                        // 0x01F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_CommitAbility_ReturnValue1;            // 0x01F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x01F3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F4[0xC];                                      // 0x01F4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0200(0x0030)(IsPlainOldData, NoDestructor)
	TDelegate<void(struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag)> K2Node_CreateDelegate_OutputDelegate2;             // 0x0230(0x0010)(ZeroConstructor, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0240(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x024C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0258(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_264[0xC];                                      // 0x0264(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0270(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABGA_RiftPortal_Item_Athena_C*          CallFunc_FinishSpawningActor_ReturnValue;          // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAbilityTargetDataHandle       K2Node_CustomEvent_TargetData2;                    // 0x02B0(0x0020)(ConstParm)
	struct FGameplayTag                           K2Node_CustomEvent_ApplicationTag2;                // 0x02D0(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Is_Flying_NewParam;                       // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item) == 0x000010, "Wrong alignment on GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item");
static_assert(sizeof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item) == 0x0002E0, "Wrong size on GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, EntryPoint) == 0x000000, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, CallFunc_HasAuthority_ReturnValue) == 0x000004, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, K2Node_CustomEvent_TargetData) == 0x000020, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::K2Node_CustomEvent_TargetData' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, K2Node_CustomEvent_ApplicationTag) == 0x000040, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::K2Node_CustomEvent_ApplicationTag' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, Temp_struct_Variable) == 0x000048, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, Temp_struct_Variable1) == 0x000050, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::Temp_struct_Variable1' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, CallFunc_GetActorInfo_ReturnValue) == 0x000070, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::CallFunc_GetActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, K2Node_DynamicCast_AsFort_Player_Pawn) == 0x0000B0, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::K2Node_DynamicCast_AsFort_Player_Pawn' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, K2Node_DynamicCast_bSuccess) == 0x0000B8, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, K2Node_CustomEvent_TargetData1) == 0x0000C0, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::K2Node_CustomEvent_TargetData1' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, K2Node_CustomEvent_ApplicationTag1) == 0x0000E0, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::K2Node_CustomEvent_ApplicationTag1' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, CallFunc_AbilityTargetDataFromActor_ReturnValue) == 0x0000E8, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::CallFunc_AbilityTargetDataFromActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, CallFunc_BP_ApplyGameplayEffectToTarget_ReturnValue) == 0x000108, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::CallFunc_BP_ApplyGameplayEffectToTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, K2Node_CreateDelegate_OutputDelegate1) == 0x000118, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, CallFunc_IsDedicatedServer_ReturnValue) == 0x000128, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, CallFunc_K2_CommitAbility_ReturnValue) == 0x000129, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::CallFunc_K2_CommitAbility_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, CallFunc_PlayMontageInfoAndWaitForTrigger_ReturnValue) == 0x000130, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::CallFunc_PlayMontageInfoAndWaitForTrigger_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, K2Node_MakeStruct_GameplayCueParameters) == 0x000138, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::K2Node_MakeStruct_GameplayCueParameters' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, CallFunc_IsValid_ReturnValue) == 0x0001F0, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, K2Node_Event_bWasCancelled) == 0x0001F1, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::K2Node_Event_bWasCancelled' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, CallFunc_K2_CommitAbility_ReturnValue1) == 0x0001F2, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::CallFunc_K2_CommitAbility_ReturnValue1' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, CallFunc_IsValid_ReturnValue1) == 0x0001F3, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000200, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, K2Node_CreateDelegate_OutputDelegate2) == 0x000230, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::K2Node_CreateDelegate_OutputDelegate2' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, CallFunc_BreakTransform_Location) == 0x000240, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, CallFunc_BreakTransform_Rotation) == 0x00024C, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, CallFunc_BreakTransform_Scale) == 0x000258, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, CallFunc_MakeTransform_ReturnValue) == 0x000270, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0002A0, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, CallFunc_FinishSpawningActor_ReturnValue) == 0x0002A8, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, K2Node_CustomEvent_TargetData2) == 0x0002B0, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::K2Node_CustomEvent_TargetData2' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, K2Node_CustomEvent_ApplicationTag2) == 0x0002D0, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::K2Node_CustomEvent_ApplicationTag2' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item, CallFunc_Is_Flying_NewParam) == 0x0002D8, "Member 'GA_Athena_Rift_Item_C_ExecuteUbergraph_GA_Athena_Rift_Item::CallFunc_Is_Flying_NewParam' has a wrong offset!");

// Function GA_Athena_Rift_Item.GA_Athena_Rift_Item_C.K2_OnEndAbility
// 0x0001 (0x0001 - 0x0000)
struct GA_Athena_Rift_Item_C_K2_OnEndAbility final
{
public:
	bool                                          bWasCancelled;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Athena_Rift_Item_C_K2_OnEndAbility) == 0x000001, "Wrong alignment on GA_Athena_Rift_Item_C_K2_OnEndAbility");
static_assert(sizeof(GA_Athena_Rift_Item_C_K2_OnEndAbility) == 0x000001, "Wrong size on GA_Athena_Rift_Item_C_K2_OnEndAbility");
static_assert(offsetof(GA_Athena_Rift_Item_C_K2_OnEndAbility, bWasCancelled) == 0x000000, "Member 'GA_Athena_Rift_Item_C_K2_OnEndAbility::bWasCancelled' has a wrong offset!");

// Function GA_Athena_Rift_Item.GA_Athena_Rift_Item_C.Triggered_1B4C20DD4792D45069FE6C8D47581114
// 0x0028 (0x0028 - 0x0000)
struct GA_Athena_Rift_Item_C_Triggered_1B4C20DD4792D45069FE6C8D47581114 final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0020)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FGameplayTag                           ApplicationTag;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Athena_Rift_Item_C_Triggered_1B4C20DD4792D45069FE6C8D47581114) == 0x000008, "Wrong alignment on GA_Athena_Rift_Item_C_Triggered_1B4C20DD4792D45069FE6C8D47581114");
static_assert(sizeof(GA_Athena_Rift_Item_C_Triggered_1B4C20DD4792D45069FE6C8D47581114) == 0x000028, "Wrong size on GA_Athena_Rift_Item_C_Triggered_1B4C20DD4792D45069FE6C8D47581114");
static_assert(offsetof(GA_Athena_Rift_Item_C_Triggered_1B4C20DD4792D45069FE6C8D47581114, TargetData) == 0x000000, "Member 'GA_Athena_Rift_Item_C_Triggered_1B4C20DD4792D45069FE6C8D47581114::TargetData' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_Triggered_1B4C20DD4792D45069FE6C8D47581114, ApplicationTag) == 0x000020, "Member 'GA_Athena_Rift_Item_C_Triggered_1B4C20DD4792D45069FE6C8D47581114::ApplicationTag' has a wrong offset!");

// Function GA_Athena_Rift_Item.GA_Athena_Rift_Item_C.Cancelled_1B4C20DD4792D45069FE6C8D47581114
// 0x0028 (0x0028 - 0x0000)
struct GA_Athena_Rift_Item_C_Cancelled_1B4C20DD4792D45069FE6C8D47581114 final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0020)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FGameplayTag                           ApplicationTag;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Athena_Rift_Item_C_Cancelled_1B4C20DD4792D45069FE6C8D47581114) == 0x000008, "Wrong alignment on GA_Athena_Rift_Item_C_Cancelled_1B4C20DD4792D45069FE6C8D47581114");
static_assert(sizeof(GA_Athena_Rift_Item_C_Cancelled_1B4C20DD4792D45069FE6C8D47581114) == 0x000028, "Wrong size on GA_Athena_Rift_Item_C_Cancelled_1B4C20DD4792D45069FE6C8D47581114");
static_assert(offsetof(GA_Athena_Rift_Item_C_Cancelled_1B4C20DD4792D45069FE6C8D47581114, TargetData) == 0x000000, "Member 'GA_Athena_Rift_Item_C_Cancelled_1B4C20DD4792D45069FE6C8D47581114::TargetData' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_Cancelled_1B4C20DD4792D45069FE6C8D47581114, ApplicationTag) == 0x000020, "Member 'GA_Athena_Rift_Item_C_Cancelled_1B4C20DD4792D45069FE6C8D47581114::ApplicationTag' has a wrong offset!");

// Function GA_Athena_Rift_Item.GA_Athena_Rift_Item_C.Completed_1B4C20DD4792D45069FE6C8D47581114
// 0x0028 (0x0028 - 0x0000)
struct GA_Athena_Rift_Item_C_Completed_1B4C20DD4792D45069FE6C8D47581114 final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0020)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FGameplayTag                           ApplicationTag;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Athena_Rift_Item_C_Completed_1B4C20DD4792D45069FE6C8D47581114) == 0x000008, "Wrong alignment on GA_Athena_Rift_Item_C_Completed_1B4C20DD4792D45069FE6C8D47581114");
static_assert(sizeof(GA_Athena_Rift_Item_C_Completed_1B4C20DD4792D45069FE6C8D47581114) == 0x000028, "Wrong size on GA_Athena_Rift_Item_C_Completed_1B4C20DD4792D45069FE6C8D47581114");
static_assert(offsetof(GA_Athena_Rift_Item_C_Completed_1B4C20DD4792D45069FE6C8D47581114, TargetData) == 0x000000, "Member 'GA_Athena_Rift_Item_C_Completed_1B4C20DD4792D45069FE6C8D47581114::TargetData' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_Completed_1B4C20DD4792D45069FE6C8D47581114, ApplicationTag) == 0x000020, "Member 'GA_Athena_Rift_Item_C_Completed_1B4C20DD4792D45069FE6C8D47581114::ApplicationTag' has a wrong offset!");

// Function GA_Athena_Rift_Item.GA_Athena_Rift_Item_C.Is Flying
// 0x0020 (0x0020 - 0x0000)
struct GA_Athena_Rift_Item_C_Is_Flying final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPawnMovementComponent*                 CallFunc_GetMovementComponent_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortMovementComp_Character*            K2Node_DynamicCast_AsFort_Movement_Comp_Character; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Athena_Rift_Item_C_Is_Flying) == 0x000008, "Wrong alignment on GA_Athena_Rift_Item_C_Is_Flying");
static_assert(sizeof(GA_Athena_Rift_Item_C_Is_Flying) == 0x000020, "Wrong size on GA_Athena_Rift_Item_C_Is_Flying");
static_assert(offsetof(GA_Athena_Rift_Item_C_Is_Flying, NewParam) == 0x000000, "Member 'GA_Athena_Rift_Item_C_Is_Flying::NewParam' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_Is_Flying, CallFunc_GetMovementComponent_ReturnValue) == 0x000008, "Member 'GA_Athena_Rift_Item_C_Is_Flying::CallFunc_GetMovementComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_Is_Flying, K2Node_DynamicCast_AsFort_Movement_Comp_Character) == 0x000010, "Member 'GA_Athena_Rift_Item_C_Is_Flying::K2Node_DynamicCast_AsFort_Movement_Comp_Character' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_Is_Flying, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'GA_Athena_Rift_Item_C_Is_Flying::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_Is_Flying, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000019, "Member 'GA_Athena_Rift_Item_C_Is_Flying::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function GA_Athena_Rift_Item.GA_Athena_Rift_Item_C.K2_CanActivateAbility
// 0x0078 (0x0078 - 0x0000)
struct GA_Athena_Rift_Item_C_K2_CanActivateAbility final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	struct FGameplayTagContainer                  RelevantTags;                                      // 0x0040(0x0020)(Parm, OutParm)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawnAthena*                  K2Node_DynamicCast_AsFort_Player_Pawn_Athena;      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Athena_Rift_Item_C_K2_CanActivateAbility) == 0x000008, "Wrong alignment on GA_Athena_Rift_Item_C_K2_CanActivateAbility");
static_assert(sizeof(GA_Athena_Rift_Item_C_K2_CanActivateAbility) == 0x000078, "Wrong size on GA_Athena_Rift_Item_C_K2_CanActivateAbility");
static_assert(offsetof(GA_Athena_Rift_Item_C_K2_CanActivateAbility, ActorInfo) == 0x000000, "Member 'GA_Athena_Rift_Item_C_K2_CanActivateAbility::ActorInfo' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_K2_CanActivateAbility, RelevantTags) == 0x000040, "Member 'GA_Athena_Rift_Item_C_K2_CanActivateAbility::RelevantTags' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_K2_CanActivateAbility, ReturnValue) == 0x000060, "Member 'GA_Athena_Rift_Item_C_K2_CanActivateAbility::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_K2_CanActivateAbility, K2Node_DynamicCast_AsFort_Player_Pawn_Athena) == 0x000068, "Member 'GA_Athena_Rift_Item_C_K2_CanActivateAbility::K2Node_DynamicCast_AsFort_Player_Pawn_Athena' has a wrong offset!");
static_assert(offsetof(GA_Athena_Rift_Item_C_K2_CanActivateAbility, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'GA_Athena_Rift_Item_C_K2_CanActivateAbility::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

